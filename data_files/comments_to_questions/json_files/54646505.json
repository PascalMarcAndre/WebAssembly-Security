[
    {
        "owner": {
            "reputation": 11,
            "user_id": 10356867,
            "user_type": "registered",
            "profile_image": "https://lh3.googleusercontent.com/-70q0MnG1sGY/AAAAAAAAAAI/AAAAAAAAADQ/zZzVT6_uSxk/photo.jpg?sz=128",
            "display_name": "Vesa Norilo",
            "link": "https://stackoverflow.com/users/10356867/vesa-norilo"
        },
        "reply_to_user": {
            "reputation": 4031,
            "user_id": 4661625,
            "user_type": "registered",
            "accept_rate": 67,
            "profile_image": "https://www.gravatar.com/avatar/c3cd0caf54e0766c83f04f51f881303b?s=128&d=identicon&r=PG&f=1",
            "display_name": "Bumsik Kim",
            "link": "https://stackoverflow.com/users/4661625/bumsik-kim"
        },
        "edited": false,
        "score": 0,
        "creation_date": 1549996685,
        "post_id": 54646505,
        "comment_id": 96104621,
        "content_license": "CC BY-SA 4.0",
        "body": "Thank you for the insights. I&#39;d be happy to mark this as an answer."
    },
    {
        "owner": {
            "reputation": 4031,
            "user_id": 4661625,
            "user_type": "registered",
            "accept_rate": 67,
            "profile_image": "https://www.gravatar.com/avatar/c3cd0caf54e0766c83f04f51f881303b?s=128&d=identicon&r=PG&f=1",
            "display_name": "Bumsik Kim",
            "link": "https://stackoverflow.com/users/4661625/bumsik-kim"
        },
        "edited": false,
        "score": 0,
        "creation_date": 1549978534,
        "post_id": 54646505,
        "comment_id": 96093920,
        "content_license": "CC BY-SA 4.0",
        "body": "Maybe it is possible to inject arbitary JS code if imported functions have <code>eval</code> or something, but AFAIK WASM only knows function signatures and it is designed to block access outside of its memory and WASM currently does not have dynamic import, which make your case much harder to happen. I&#39;m not an expert in security but I don&#39;t think SO is the right place to ask such qeustions because it worth a CVE if there is an answer."
    },
    {
        "owner": {
            "reputation": 11,
            "user_id": 10356867,
            "user_type": "registered",
            "profile_image": "https://lh3.googleusercontent.com/-70q0MnG1sGY/AAAAAAAAAAI/AAAAAAAAADQ/zZzVT6_uSxk/photo.jpg?sz=128",
            "display_name": "Vesa Norilo",
            "link": "https://stackoverflow.com/users/10356867/vesa-norilo"
        },
        "reply_to_user": {
            "reputation": 4031,
            "user_id": 4661625,
            "user_type": "registered",
            "accept_rate": 67,
            "profile_image": "https://www.gravatar.com/avatar/c3cd0caf54e0766c83f04f51f881303b?s=128&d=identicon&r=PG&f=1",
            "display_name": "Bumsik Kim",
            "link": "https://stackoverflow.com/users/4661625/bumsik-kim"
        },
        "edited": false,
        "score": 0,
        "creation_date": 1549972446,
        "post_id": 54646505,
        "comment_id": 96090134,
        "content_license": "CC BY-SA 4.0",
        "body": "Yes! So assume a malicious blob can bypass other security mechanisms and corrupt the memory used by the emscripten-ed C++ code. I&#39;m ok with the app breaking at that point: I&#39;m wondering if the attacker could get arbitrary JS execution through the JS interface generated by emscripten."
    },
    {
        "owner": {
            "reputation": 4031,
            "user_id": 4661625,
            "user_type": "registered",
            "accept_rate": 67,
            "profile_image": "https://www.gravatar.com/avatar/c3cd0caf54e0766c83f04f51f881303b?s=128&d=identicon&r=PG&f=1",
            "display_name": "Bumsik Kim",
            "link": "https://stackoverflow.com/users/4661625/bumsik-kim"
        },
        "edited": false,
        "score": 0,
        "creation_date": 1549964740,
        "post_id": 54646505,
        "comment_id": 96085402,
        "content_license": "CC BY-SA 4.0",
        "body": "&quot;All wasm blobs share memory&quot; Do you mean the situation that all WebAssembly modules shares the same WebAssembly.memory instance?"
    }
]