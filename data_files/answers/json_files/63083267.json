[
    {
        "owner": {
            "reputation": 4127,
            "user_id": 1492496,
            "user_type": "registered",
            "profile_image": "https://i.stack.imgur.com/dO7to.png?s=128&g=1",
            "display_name": "Brian Parker",
            "link": "https://stackoverflow.com/users/1492496/brian-parker"
        },
        "is_accepted": true,
        "score": 10,
        "last_activity_date": 1595946397,
        "last_edit_date": 1595946397,
        "creation_date": 1595871345,
        "answer_id": 63120607,
        "question_id": 63083267,
        "content_license": "CC BY-SA 4.0",
        "body": "<p>This works with the WebAssembly self hosted Identity server with [Authorize] attribute on the hub (which uses bearer tokens...).</p>\n<p>What is important is configuring of a function to get the token on Hub start. The hub connection can use whatever transport mechanism it needs to send the access token.</p>\n<pre><code> hubConnection = new HubConnectionBuilder()\n            .WithUrl(NavigationManager.ToAbsoluteUri(&quot;/chathub&quot;), options =&gt;\n            {\n                options.AccessTokenProvider = async () =&gt;\n                {\n                    var accessTokenResult = await AccessTokenProvider.RequestAccessToken();\n                    accessTokenResult.TryGetToken(out var accessToken);\n                    return accessToken.Value;\n                };\n            })\n            .Build();\n</code></pre>\n<p>The full page I adapted from the 3.1 SignalR tutorials.</p>\n<pre><code>@using Microsoft.AspNetCore.SignalR.Client\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n@using Microsoft.AspNetCore.Authorization\n\n@page &quot;/chat&quot;\n@attribute [Authorize]\n@implements IDisposable\n\n&lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;\n        User:\n        &lt;input @bind=&quot;userInput&quot; /&gt;\n    &lt;/label&gt;\n&lt;/div&gt;\n&lt;div class=&quot;form-group&quot;&gt;\n    &lt;label&gt;\n        Message:\n        &lt;input @bind=&quot;messageInput&quot; size=&quot;50&quot; /&gt;\n    &lt;/label&gt;\n&lt;/div&gt;\n&lt;button @onclick=&quot;Send&quot; disabled=&quot;@(!IsConnected)&quot;&gt;Send&lt;/button&gt;\n\n&lt;hr&gt;\n\n&lt;ul id=&quot;messagesList&quot;&gt;\n    @foreach (var message in messages)\n    {\n        &lt;li&gt;@message&lt;/li&gt;\n    }\n&lt;/ul&gt;\n\n@code {\n    private HubConnection hubConnection;\n    private List&lt;string&gt; messages = new List&lt;string&gt;();\n    private string userInput;\n    private string messageInput;\n\n    [Inject]\n    public NavigationManager NavigationManager { get; set; }\n\n    [Inject]\n    public IAccessTokenProvider AccessTokenProvider { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n\n        hubConnection = new HubConnectionBuilder()\n            .WithUrl(NavigationManager.ToAbsoluteUri(&quot;/chathub&quot;), options =&gt;\n            {\n                options.AccessTokenProvider = async () =&gt;\n                {\n                    var accessTokenResult = await AccessTokenProvider.RequestAccessToken();\n                    accessTokenResult.TryGetToken(out var accessToken);\n                    return accessToken.Value;\n                };\n            })\n            .Build();\n\n        hubConnection.On&lt;string, string&gt;(&quot;ReceiveMessage&quot;, (user, message) =&gt;\n        {\n            var encodedMsg = $&quot;{user}: {message}&quot;;\n            messages.Add(encodedMsg);\n            StateHasChanged();\n        });\n\n        await hubConnection.StartAsync();\n    }\n\n    Task Send() =&gt;\n        hubConnection.SendAsync(&quot;SendMessage&quot;, userInput, messageInput);\n\n    public bool IsConnected =&gt;\n        hubConnection.State == HubConnectionState.Connected;\n\n    public void Dispose()\n    {\n        _ = hubConnection.DisposeAsync();\n    }\n}\n</code></pre>\n<p>Here is a working <a href=\"https://github.com/BrianLParker/SignalRAuth\" rel=\"noreferrer\">repo</a></p>\n<p>Here are the <a href=\"https://github.com/BrianLParker/SignalRAuth/commit/7bbf5fdacdc22dc65e42ee2390a6d58eb7bcb14c\" rel=\"noreferrer\">changes</a> I made to the standard WebAssembly with Identity project. Other than the page I posted I basically followed the <a href=\"https://docs.microsoft.com/en-au/aspnet/core/tutorials/signalr-blazor-webassembly?view=aspnetcore-3.1&amp;tabs=visual-studio\" rel=\"noreferrer\">WebAssembly Signalr tutorial</a></p>\n<p>In your solution:\nSignalR.razor</p>\n<pre><code> hubConnection = new HubConnectionBuilder()\n             .WithUrl(NavigationManager.ToAbsoluteUri(&quot;/messageshub&quot;), options =&gt;\n             {\n                 options.AccessTokenProvider = async () =&gt;\n                 {\n                     var accessTokenResult = await tokenProvider.RequestAccessToken();\n                     accessTokenResult.TryGetToken(out var accessToken);\n                     return accessToken.Value;\n                 };\n             })\n            .Build();\n</code></pre>\n<p>In Startup.cs change this back to the template.</p>\n<pre><code>services.AddAuthentication()\n                  .AddIdentityServerJwt();\n</code></pre>\n<p>Then just [Authorize] on your hub.</p>\n<p>Your code <a href=\"https://github.com/BrianLParker/SignalRAuthTest\" rel=\"noreferrer\">working</a></p>\n"
    }
]