[
    {
        "owner": {
            "reputation": 14858,
            "user_id": 10505040,
            "user_type": "registered",
            "profile_image": "https://www.gravatar.com/avatar/643c7cd13b4cd09ce56bb9ee71914516?s=128&d=identicon&r=PG&f=1",
            "display_name": "Jim Xu",
            "link": "https://stackoverflow.com/users/10505040/jim-xu"
        },
        "is_accepted": true,
        "score": 1,
        "last_activity_date": 1593670107,
        "creation_date": 1593670107,
        "answer_id": 62690018,
        "question_id": 62665194,
        "content_license": "CC BY-SA 4.0",
        "body": "<p>According to my test, if you want to upload file in Blazor WebAssembly ASP.Net Core hosted PWA, please refer to the following steps</p>\n<ol>\n<li><p>Client(I use the sdk <code>Tewr.Blazor.FileReader</code>)</p>\n<p>a. update <code>Program.cs</code></p>\n<pre><code>builder.Services.AddFileReaderService(options =&gt; {\n          options.UseWasmSharedBuffer = true;\n      });\n      builder.Services.AddTransient(sp =&gt;\n          new HttpClient\n          {\n              BaseAddress = new Uri(builder.HostEnvironment.BaseAddress)\n          });\n</code></pre>\n<p>b. upload file razor-view</p>\n</li>\n</ol>\n<pre><code>@using System.IO\n@using Blazor.FileReader\n\n@inject HttpClient client;\n@inject IFileReaderService fileReader\n&lt;h1&gt;File uplaod Blzaor WebAssembly!&lt;/h1&gt;\n&lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;col-4&quot;&gt;\n        &lt;div class=&quot;form-group&quot;&gt;\n            &lt;input type=&quot;file&quot; name=&quot;image&quot; @ref=&quot;inputReference&quot; @onchange=&quot;async() =&gt;await OpenFile()&quot; /&gt;\n            &lt;ul&gt;\n                &lt;li&gt;File Name: @fileName&lt;/li&gt;\n                &lt;li&gt;Size: @size&lt;/li&gt;\n                &lt;li&gt;Type: @type&lt;/li&gt;\n            &lt;/ul&gt;\n\n        &lt;/div&gt;\n        &lt;button class=&quot;btn btn-block btn-success&quot; @onclick=&quot;async() =&gt;await UploadFile()&quot;&gt; Upload File&lt;/button&gt;\n        @if (!string.IsNullOrWhiteSpace(message))\n        {\n            &lt;div class=&quot;alert alert-success&quot;&gt;\n                File has been uplaoded\n            &lt;/div&gt;\n\n        }\n    &lt;/div&gt;   \n&lt;/div&gt;\n\n\n@code{\n    ElementReference inputReference;\n    string message = string.Empty;\n    string fileName = string.Empty;\n    string type = string.Empty;\n    string size = string.Empty;\n    Stream fileStream=null;\n\n    async Task UploadFile()\n    {\n        var content = new MultipartFormDataContent();\n        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue(&quot;form-data&quot;);\n        var sc = new StreamContent(fileStream, (int)fileStream.Length);\n        content.Add(sc, &quot;image&quot;, fileName);\n\n\n        var response = await client.PostAsync(&quot;/upload&quot;, content);\n        if (response.IsSuccessStatusCode) {\n            message = &quot;OK&quot;;\n        }\n\n    }\n\n    async Task OpenFile()\n    {\n        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();\n\n        if (file == null) {\n            return;\n        }\n\n        var fileInfo=await file.ReadFileInfoAsync();\n        fileName = fileInfo.Name;\n        type = fileInfo.Type;\n        size = $&quot;{fileInfo.Size} Bytes&quot;;\n\n        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size)) {\n            fileStream = new MemoryStream(ms.ToArray());\n        }\n    }\n\n\n\n}\n</code></pre>\n<ol start=\"2\">\n<li>Server</li>\n</ol>\n<p>API COntroller</p>\n<pre><code> [HttpPost]\n        public async Task&lt;IActionResult&gt; Post([FromForm(Name =&quot;image&quot;)]IFormFile file) {\n\n            if (file == null || file.Length == 0) {\n                return BadRequest(&quot;do not receive file&quot;);\n            }\n\n            var fileName = file.FileName;\n            var extension = Path.GetExtension(fileName);\n            var newFileName = $&quot;{Guid.NewGuid()}{extension}&quot;;\n            var filePath = Path.Combine(_env.ContentRootPath, &quot;Images&quot;, newFileName);\n            if (!Directory.Exists(Path.Combine(_env.ContentRootPath, &quot;Images&quot;))) {\n                Directory.CreateDirectory(Path.Combine(_env.ContentRootPath, &quot;Images&quot;));\n            \n            }\n            using (var stream = new FileStream(filePath, FileMode.Create, FileAccess.Write)) {\n                await file.CopyToAsync(stream);\n            }\n            \n            return Ok(filePath);\n        \n        }\n</code></pre>\n<ol start=\"3\">\n<li>Result</li>\n</ol>\n<p><a href=\"https://i.stack.imgur.com/xN261.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/xN261.png\" alt=\"enter image description here\" /></a>\n<a href=\"https://i.stack.imgur.com/zFE1u.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/zFE1u.png\" alt=\"enter image description here\" /></a></p>\n"
    }
]