[
    {
        "owner": {
            "reputation": 14858,
            "user_id": 10505040,
            "user_type": "registered",
            "profile_image": "https://www.gravatar.com/avatar/643c7cd13b4cd09ce56bb9ee71914516?s=128&d=identicon&r=PG&f=1",
            "display_name": "Jim Xu",
            "link": "https://stackoverflow.com/users/10505040/jim-xu"
        },
        "is_accepted": false,
        "score": 0,
        "last_activity_date": 1609828669,
        "creation_date": 1609828669,
        "answer_id": 65574222,
        "question_id": 65532865,
        "content_license": "CC BY-SA 4.0",
        "body": "<p>If you want to call Microsoft graph and your custom API in one blazor webassembly project, we can implement it by creating different HTTP client to call different API</p>\n<p>For example</p>\n<ul>\n<li><p><strong>Register a server API app</strong></p>\n<ol>\n<li>Register an AAD app for the Server API app</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-expose-web-apis#add-a-scope\" rel=\"nofollow noreferrer\">Expose an API</a></li>\n</ol>\n</li>\n<li><p><strong>Register a client app</strong></p>\n<ol>\n<li>Register a client app</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-register-spa#enable-the-implicit-flow\" rel=\"nofollow noreferrer\">Enable Implicit grant flow</a></li>\n<li>Add API permissions. (Graph API permissions and API app permissions)</li>\n</ol>\n</li>\n<li><p><strong>Configure API app</strong></p>\n</li>\n</ul>\n<p>Please add the following code in <code>Startup.cs</code></p>\n<pre><code> public void ConfigureServices(IServiceCollection services)\n {\n        JwtSecurityTokenHandler.DefaultMapInboundClaims = false;\n        services.AddCors(options =&gt;\n            {\n                options.AddDefaultPolicy(\n                    builder =&gt; builder.AllowAnyOrigin()\n                        .AllowAnyHeader()\n                        .AllowAnyMethod());\n            });\n               services.AddAuthentication(AzureADDefaults.BearerAuthenticationScheme)\n                .AddAzureADBearer(options =&gt; Configuration.Bind(&quot;AzureAd&quot;, options));\n\n            services.Configure&lt;JwtBearerOptions&gt;(AzureADDefaults.JwtBearerAuthenticationScheme, options =&gt;\n            {\n                options.Authority += &quot;/v2.0&quot;;\n\n\n                options.TokenValidationParameters = new TokenValidationParameters\n                {\n                    \n                    ValidIssuers = new[] {\n                      $&quot;https://sts.windows.net/{Configuration[&quot;AzureAD:TenantId&quot;]}/&quot;,\n                      $&quot;https://login.microsoftonline.com/{Configuration[&quot;AzureAD:TenantId&quot;]}/v2.0&quot;\n\n                    },\n                    RoleClaimType = &quot;roles&quot;,\n                    // The web API accepts as audiences both the Client ID (options.Audience) and api://{ClientID}.\n                    ValidAudiences = new[]\n                    {\n                           options.Audience,\n                           $&quot;api://{options.Audience}&quot;\n                    }\n\n                };\n\n            });\n....\n}\n  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            app.UseSwagger();\n            app.UseSwaggerUI(c =&gt;\n            {\n                c.OAuthClientId(Configuration[&quot;Swagger:ClientId&quot;]);\n                c.OAuthScopeSeparator(&quot; &quot;);\n                c.OAuthAppName(&quot;Protected Api&quot;);\n\n                c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;My API V1&quot;);\n            });\n            app.UseHttpsRedirection();\n\n            app.UseRouting();\n            app.UseCors();\n            app.UseAuthentication();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =&gt;\n            {\n                endpoints.MapControllers();\n            });\n        }\n</code></pre>\n<ul>\n<li><strong>Configure Client APP</strong></li>\n</ul>\n<ol>\n<li>Create custom AuthorizationMessageHandler for Graph API and custom API</li>\n</ol>\n<pre><code>// custom API\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.AspNetCore.Components.WebAssembly.Authentication;\n\npublic class CustomAuthorizationMessageHandler : AuthorizationMessageHandler\n{\n    public CustomAuthorizationMessageHandler(IAccessTokenProvider provider,\n        NavigationManager navigationManager)\n        : base(provider, navigationManager)\n    {\n        ConfigureHandler(\n            authorizedUrls: new[] { &quot;https://localhost:44300/&quot; },\n            scopes: new[] { &quot;the API app scope&quot; });\n    }\n}\n</code></pre>\n<pre><code>//Graph API\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.AspNetCore.Components.WebAssembly.Authentication;\n\npublic class GraphAuthorizationMessageHandler : AuthorizationMessageHandler\n{\n    public GraphAuthorizationMessageHandler(IAccessTokenProvider provider,\n        NavigationManager navigationManager)\n        : base(provider, navigationManager)\n    {\n        ConfigureHandler(\n            authorizedUrls: new[] { &quot;https://graph.microsoft.com/&quot; },\n            scopes: new[] { &quot;https://graph.microsoft.com/User.Read&quot; });\n    }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Add the following code to the program.cs</li>\n</ol>\n<pre><code>public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add&lt;App&gt;(&quot;app&quot;);\n\n            builder.Services.AddScoped&lt;CustomAuthorizationMessageHandler&gt;();\n            builder.Services.AddScoped&lt;GraphAuthorizationMessageHandler&gt;();\n            // register HTTP client to call our own api\n            builder.Services.AddHttpClient(&quot;MyAPI&quot;, client =&gt; client.BaseAddress = new Uri(&quot;https://localhost:44300/&quot;))\n              .AddHttpMessageHandler&lt;CustomAuthorizationMessageHandler&gt;();\n            // register HTTP client to call graph api\n            builder.Services.AddHttpClient(&quot;GraphAPI&quot;, client =&gt; client.BaseAddress = new Uri(&quot;https://graph.microsoft.com/&quot;))\n              .AddHttpMessageHandler&lt;GraphAuthorizationMessageHandler&gt;();\n  \n            builder.Services.AddMsalAuthentication(options =&gt;\n            {\n                builder.Configuration.Bind(&quot;AzureAd&quot;, options.ProviderOptions.Authentication);\n                options.ProviderOptions.DefaultAccessTokenScopes.Add(&quot;&lt;the API app scope&gt;&quot;);\n                options.ProviderOptions.AdditionalScopesToConsent.Add(&quot;https://graph.microsoft.com/User.Read&quot;);\n            });\n\n            await builder.Build().RunAsync();\n        }\n    }\n</code></pre>\n<ol start=\"3\">\n<li>Call the api</li>\n</ol>\n<pre><code>@inject IHttpClientFactory _clientFactory\n\nvar httpClient = _clientFactory.CreateClient(&quot;&lt;the client name you register&gt;&quot;);\nawait apiClient.GetStringAsync(&quot;path&quot;);\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/FXhFL.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/FXhFL.png\" alt=\"enter image description here\" /></a></p>\n"
    }
]