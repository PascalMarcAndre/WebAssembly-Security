[
    {
        "owner": {
            "reputation": 25737,
            "user_id": 6152891,
            "user_type": "registered",
            "accept_rate": 75,
            "profile_image": "https://www.gravatar.com/avatar/b45b7f89429f8766cdbf6c776c0a9d41?s=128&d=identicon&r=PG",
            "display_name": "enet",
            "link": "https://stackoverflow.com/users/6152891/enet"
        },
        "is_accepted": true,
        "score": 3,
        "last_activity_date": 1608581256,
        "last_edit_date": 1608581256,
        "creation_date": 1608573029,
        "answer_id": 65397622,
        "question_id": 65397419,
        "content_license": "CC BY-SA 4.0",
        "body": "<p>You can't use <code>UserManager</code> from WebAssembly Blazor app as it is running on the browser. Generally speaking, you can't use objects related to database access in WebAssembly Blazor app. Instead you usually create a Web Api action methods, and access these methods using Fetch API (HttpClient).</p>\n<p>What value do you want to extricate from the User object ?</p>\n<p>What is <code>Nombre</code>?</p>\n<p>No matter what is <code>Nombre</code>, you can add this value (<code>Nombre</code>) as a claim and access it from <code>authState.User</code></p>\n<h2>UPDATE</h2>\n<p>First off, you should create a service class named ApplicationUserClaimsPrincipalFactory which is used to transform table columns' value from the Users table into claims that are added to the ClaimsPrincipal object passed to the Blazor client.</p>\n<h2>(server application) ApplicationUserClaimsPrincipalFactory.cs</h2>\n<pre><code>using AuthenticationStateProviderCustomClaims.Server.Models;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.Extensions.Options;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\n\n\npublic class ApplicationUserClaimsPrincipalFactory : \n                       UserClaimsPrincipalFactory&lt;ApplicationUser&gt;\n    {\n        public ApplicationUserClaimsPrincipalFactory(UserManager&lt;ApplicationUser&gt; userManager, \n                                  IOptions&lt;IdentityOptions&gt; optionsAccessor) : base(userManager, optionsAccessor)\n        {\n        }\n\n        protected override async Task&lt;ClaimsIdentity&gt; \n                 GenerateClaimsAsync(ApplicationUser user)\n        {\n            ClaimsIdentity claims = await \n                            base.GenerateClaimsAsync(user);\n\n            \n            claims.AddClaim(new Claim(&quot;name&quot;, user.Nombre));\n            \n            return claims;\n        }\n        \n    }\n</code></pre>\n<h2>Startup.ConfigureServices</h2>\n<p>put the following below the .AddDBContext:</p>\n<pre><code>services.AddScoped&lt;ApplicationUserClaimsPrincipalFactory&gt;();\n\n            services.AddDefaultIdentity&lt;ApplicationUser&gt;(options =&gt; options.SignIn.RequireConfirmedAccount = true)\n                .AddRoles&lt;IdentityRole&gt;()\n                .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()\n                .AddClaimsPrincipalFactory&lt;ApplicationUserClaimsPrincipalFactory&gt;();\n</code></pre>\n<p>services.AddIdentityServer()\n.AddApiAuthorization&lt;ApplicationUser, ApplicationDbContext&gt;(options =&gt;\n{</p>\n<pre><code>  // Note: This settings may be superfluous as the name claim \n  // is added by default.              \n  options.IdentityResources[&quot;openid&quot;].UserClaims.Add(&quot;name&quot;); \n  options.ApiResources.Single().UserClaims.Add(&quot;name&quot;);  \n\n          });\n\n  services.AddAuthentication().AddIdentityServerJwt();\n</code></pre>\n<h2>Client Side</h2>\n<p>Run this code and see if its working...If not please post complete report of the errors</p>\n<h2>Index.razor</h2>\n<pre><code>@page &quot;/&quot;\n\n@using System.Security.Claims\n@using Microsoft.AspNetCore.Components.Authorization\n@inject AuthenticationStateProvider AuthenticationStateProvider\n\n&lt;p&gt;@_authMessage&lt;/p&gt;\n\n@if (_claims != null &amp;&amp; _claims.Count() &gt; 0)\n{\n    &lt;ul&gt;\n        @foreach (var claim in _claims)\n        {\n            &lt;li&gt;@claim.Type: @claim.Value&lt;/li&gt;\n        }\n    &lt;/ul&gt;\n}\n\n&lt;p&gt;@_nombreMessage&lt;/p&gt;\n\n\n@code {\n    private string _authMessage;\n    private string _nombreMessage;\n    private IEnumerable&lt;Claim&gt; _claims = Enumerable.Empty&lt;Claim&gt;();\n\n    private async Task GetClaimsPrincipalData()\n    {\n        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();\n        var user = authState.User;\n\n        if (user.Identity.IsAuthenticated)\n        {\n            _authMessage = $&quot;{user.Identity.Name} is authenticated.&quot;;\n            _claims = user.Claims;\n            _nombreMessage =\n            $&quot;Nombre: {user.FindFirst(c =&gt; c.Type == ClaimTypes.Name)?.Value}&quot;;\n        }\n        else\n        {\n            _authMessage = &quot;The user is NOT authenticated.&quot;;\n        }\n    }\n    protected override async Task OnInitializedAsync()\n    {\n        await GetClaimsPrincipalData();\n    }\n}\n</code></pre>\n"
    }
]