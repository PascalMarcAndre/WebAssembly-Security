{
    "owner": {
        "reputation": 4966,
        "user_id": 812369,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/bf76341bdec26376f2b4ff2a77a5d80a?s=128&d=identicon&r=PG",
        "display_name": "rdmptn",
        "link": "https://stackoverflow.com/users/812369/rdmptn"
    },
    "is_accepted": true,
    "score": 1,
    "last_activity_date": 1585655672,
    "last_edit_date": 1585655672,
    "creation_date": 1585295247,
    "answer_id": 60881818,
    "question_id": 60571055,
    "content_license": "CC BY-SA 4.0",
    "body": "<p>I will assume that the grid component gets the following value correctly set <code>[Inject] public AppData ShowData { get; set; }</code> after the dropdown change.</p>\n\n<p>The issue is that in the grid component there is no event handler or any code that will update the grid data.</p>\n\n<p>The <code>OnInitializedAsync</code> event will fire once when the grid component is added to the page for the first time and that's it - it won't be called again, so your service won't be called again to get new grid data.</p>\n\n<p>The way I would personally handle this is to <strong>expose an event from the <code>ShowSelect</code> component that I can consume in the grid component in order to call my service again</strong>.</p>\n\n<p>With this, I won't really need the <code>AppState</code> if that's all it contains.</p>\n\n<p>I would also add a parameter to my API so the server will do my filtering and send me back only the relevant data.</p>\n\n<p>EDIT: Because of the comments, I made an example of exposing the event, here it is (I cut some corners in the data binding to make it shorter, but I hope it still illustrates the point).</p>\n\n<p>First, the ShowSelect component</p>\n\n<pre><code>&lt;TelerikDropDownList Value=\"@ShowId\" Data=\"@Shows\"\n                     ValueChanged=\"@((int s) =&gt; ShowSelected(s))\"&gt;&lt;/TelerikDropDownList&gt;\n\n@code {\n    List&lt;int&gt; Shows { get; set; } = new List&lt;int&gt; { 1, 2, 3 };\n    [Parameter]\n    public int ShowId { get; set; }\n    [Parameter]\n    public EventCallback&lt;int&gt; OnShowIdChanged { get; set; }\n\n    async Task ShowSelected(int showId)\n    {\n        ShowId = showId;\n        await OnShowIdChanged.InvokeAsync(ShowId);\n    }\n}\n</code></pre>\n\n<p>Then, consuming that event in the main component with the grid:</p>\n\n<pre><code>&lt;ShowSelect ShowId=\"@ShowId\" OnShowIdChanged=\"@ShowIdChangedHandler\" /&gt;\n\n&lt;TelerikGrid Data=\"@MyData\" Height=\"400px\" Pageable=\"true\"&gt;\n    &lt;GridColumns&gt;\n        &lt;GridColumn Field=\"@(nameof(SampleData.Id))\" Width=\"120px\" /&gt;\n        &lt;GridColumn Field=\"@(nameof(SampleData.Name))\" Title=\"Employee Name\" Groupable=\"false\" /&gt;\n        &lt;GridColumn Field=\"@(nameof(SampleData.GenerationDate))\" Title=\"Benchmark - data generated at\" /&gt;\n        &lt;GridColumn Field=\"@(nameof(SampleData.ShowId))\" Title=\"Show ID - see the dropdown\" /&gt;\n    &lt;/GridColumns&gt;\n&lt;/TelerikGrid&gt;\n\n@code {\n    public List&lt;SampleData&gt; MyData { get; set; }\n    int ShowId { get; set; } // you may not even want this parameter here, but it helps with keeping the dropdown in sync with the main page\n\n    protected override async Task OnInitializedAsync()\n    {\n        ShowId = 2;//maybe you fetch that from a service too\n        MyData = await GetDataFromService(ShowId);\n    }\n\n    async Task ShowIdChangedHandler(int showId)\n    {\n        ShowId = showId;\n        MyData = await GetDataFromService(ShowId);\n    }\n\n    async Task&lt;List&lt;SampleData&gt;&gt; GetDataFromService(int showId)\n    {\n        await Task.Delay(500);\n        //simulate service here\n        var data = Enumerable.Range(1, 30).Select(x =&gt; new SampleData\n        {\n            Id = x,\n            Name = \"name \" + x,\n            GenerationDate = DateTime.Now,\n            ShowId = showId\n        }).ToList();\n\n        return await Task.FromResult(data);\n    }\n\n    public class SampleData\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public DateTime GenerationDate { get; set; }\n        public int ShowId { get; set; }\n    }\n}\n</code></pre>\n"
}