{
    "owner": {
        "reputation": 4004,
        "user_id": 1492496,
        "user_type": "registered",
        "profile_image": "https://i.stack.imgur.com/dO7to.png?s=128&g=1",
        "display_name": "Brian Parker",
        "link": "https://stackoverflow.com/users/1492496/brian-parker"
    },
    "is_accepted": true,
    "score": 0,
    "last_activity_date": 1605692436,
    "creation_date": 1605692436,
    "answer_id": 64890511,
    "question_id": 64889232,
    "content_license": "CC BY-SA 4.0",
    "body": "<p>Firstly you need to make the Dob a claim. I am not sure if you should use <code>JwtClaimTypes.BirthDate</code> as your datetime format is not the same as what is expected here.</p>\n<pre><code> public class CustomUserClaimsPrincipalFactory\n         : UserClaimsPrincipalFactory&lt;ApplicationUser, IdentityRole&gt;\n    {\n        public CustomUserClaimsPrincipalFactory(\n            UserManager&lt;ApplicationUser&gt; userManager,\n            RoleManager&lt;IdentityRole&gt; roleManager,\n            IOptions&lt;IdentityOptions&gt; optionsAccessor)\n            : base(userManager, roleManager, optionsAccessor)\n        { }\n\n        public override async Task&lt;ClaimsPrincipal&gt; CreateAsync(ApplicationUser user)\n        {\n            ClaimsPrincipal principal = await base.CreateAsync(user);\n            var identity = (ClaimsIdentity)principal.Identity;\n\n            var claims = new List&lt;Claim&gt;\n            {\n                new Claim(JwtClaimTypes.BirthDate, JsonSerializer.Serialize(user.DoB))\n            };\n...\n            identity.AddClaims(claims);\n            return principal;\n        }\n    }\n</code></pre>\n<p>To use this add this line to startup.cs on the server code</p>\n<pre><code>services.AddDefaultIdentity&lt;ApplicationUser&gt;(options =&gt; options.SignIn.RequireConfirmedAccount = true)\n               .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()\n               .AddClaimsPrincipalFactory&lt;CustomUserClaimsPrincipalFactory&gt;();\n</code></pre>\n<p>You also need to make sure the claim gets added to the JWT so the client can see it.</p>\n<pre><code> services.AddIdentityServer()\n                .AddApiAuthorization&lt;ApplicationUser, ApplicationDbContext&gt;(options =&gt;\n                {\n                    const string OpenId = &quot;openid&quot;;\n\n                    options.IdentityResources[OpenId].UserClaims.Add(JwtClaimTypes.BirthDate);\n                    options.ApiResources.Single().UserClaims.Add(JwtClaimTypes.BirthDate);\n                });\n</code></pre>\n<p>You then have to set up a Policy in <code>Program.cs</code> for the client</p>\n<pre><code>  builder.Services.AddSingleton&lt;IAuthorizationHandler, MinimumAgeHandler&gt;();\n  builder.Services.AddAuthorizationCore(options =&gt; options.AddPolicy(&quot;AtLeast18&quot;, policy =&gt; policy.Requirements.Add(new MinimumAgeRequirement(18)));\n</code></pre>\n<p>Then you can use the [Authorize] attribute on your page.</p>\n<pre><code>@using Microsoft.AspNetCore.Authorization\n@attribute [Authorize(Policy=&quot;AtLeast18&quot;)]\n@page &quot;/adults&quot;\n\n&lt;h3&gt;Adults Only&lt;/h3&gt;\n\n\n</code></pre>\n<p>Policy Classes:</p>\n<pre><code>  public class MinimumAgeRequirement : IAuthorizationRequirement\n    {\n        public int MinimumAge { get; }\n\n        public MinimumAgeRequirement(int minimumAge)\n        {\n            MinimumAge = minimumAge;\n        }\n    }\n\n   public class MinimumAgeHandler : AuthorizationHandler&lt;MinimumAgeRequirement&gt;\n    {\n        public MinimumAgeHandler(IDateTimeBroker dateTimeBroker)\n        {\n            DateTimeBroker = dateTimeBroker;\n        }\n\n        protected IDateTimeBroker DateTimeBroker { get; }\n\n        protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, MinimumAgeRequirement requirement)\n        {\n\n            if (!context.User.HasClaim(c =&gt; c.Type == JwtClaimTypes.BirthDate))\n            {\n                return Task.CompletedTask;\n            }\n            var claimValue = context.User.FindFirst(c =&gt; c.Type == JwtClaimTypes.BirthDate).Value;\n            var dob = JsonSerializer.Deserialize&lt;DateTimeOffset?&gt;(claimValue);\n            if (!dob.HasValue)\n            {\n                return Task.CompletedTask;\n            }\n\n            var dateOfBirth = dob.Value;\n\n\n            int calculatedAge = DateTimeBroker.GetDateTime().Date.Year - dateOfBirth.Year;\n\n            if (dateOfBirth &gt; DateTimeBroker.GetDateTime().AddYears(-calculatedAge))\n            {\n                calculatedAge--;\n            }\n\n            if (calculatedAge &gt;= requirement.MinimumAge)\n            {\n                context.Succeed(requirement);\n            }\n\n            return Task.CompletedTask;\n        }\n    }\n</code></pre>\n"
}