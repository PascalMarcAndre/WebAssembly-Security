{
    "owner": {
        "reputation": 153,
        "user_id": 11476545,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/439ded087dfb9e0529421b669d9914ca?s=128&d=identicon&r=PG&f=1",
        "display_name": "Bisjob",
        "link": "https://stackoverflow.com/users/11476545/bisjob"
    },
    "is_accepted": true,
    "score": 0,
    "last_activity_date": 1591869267,
    "creation_date": 1591869267,
    "answer_id": 62321670,
    "question_id": 62306681,
    "content_license": "CC BY-SA 4.0",
    "body": "<p>Ok I found what I needed :</p>\n\n<p>1) Create a CustomUserFactory in your client App</p>\n\n<pre><code>using System.Linq;\nusing System.Security.Claims;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components.WebAssembly.Authentication;\nusing Microsoft.AspNetCore.Components.WebAssembly.Authentication.Internal;\n\npublic class CustomUserFactory\n    : AccountClaimsPrincipalFactory&lt;RemoteUserAccount&gt;\n{\n    public CustomUserFactory(IAccessTokenProviderAccessor accessor)\n        : base(accessor)\n    {\n    }\n\n    public async override ValueTask&lt;ClaimsPrincipal&gt; CreateUserAsync(\n        RemoteUserAccount account,\n        RemoteAuthenticationUserOptions options)\n    {\n        var user = await base.CreateUserAsync(account, options);\n\n        if (user.Identity.IsAuthenticated)\n        {\n            var identity = (ClaimsIdentity)user.Identity;\n            var roleClaims = identity.FindAll(identity.RoleClaimType);\n\n            if (roleClaims != null &amp;&amp; roleClaims.Any())\n            {\n                foreach (var existingClaim in roleClaims)\n                {\n                    identity.RemoveClaim(existingClaim);\n                }\n\n                var rolesElem = account.AdditionalProperties[identity.RoleClaimType];\n\n                if (rolesElem is JsonElement roles)\n                {\n                    if (roles.ValueKind == JsonValueKind.Array)\n                    {\n                        foreach (var role in roles.EnumerateArray())\n                        {\n                            identity.AddClaim(new Claim(options.RoleClaim, role.GetString()));\n                        }\n                    }\n                    else\n                    {\n                        identity.AddClaim(new Claim(options.RoleClaim, roles.GetString()));\n                    }\n                }\n            }\n        }\n\n        return user;\n    }\n}\n</code></pre>\n\n<p>2) Register the client factory </p>\n\n<pre><code>builder.Services.AddApiAuthorization()\n.AddAccountClaimsPrincipalFactory&lt;CustomUserFactory&gt;();\n</code></pre>\n\n<p>3) In the Server App, call IdentityBuilder.AddRoles</p>\n\n<pre><code>services.AddDefaultIdentity&lt;ApplicationUser&gt;(options =&gt; \noptions.SignIn.RequireConfirmedAccount = true)\n.AddRoles&lt;IdentityRole&gt;()\n.AddEntityFrameworkStores&lt;ApplicationDbContext&gt;();\n</code></pre>\n\n<p>4) Configure Identity Server</p>\n\n<pre><code>services.AddIdentityServer()\n.AddApiAuthorization&lt;ApplicationUser, ApplicationDbContext&gt;(options =&gt; {\n    options.IdentityResources[\"openid\"].UserClaims.Add(\"name\");\n    options.ApiResources.Single().UserClaims.Add(\"name\");\n    options.IdentityResources[\"openid\"].UserClaims.Add(\"role\");\n    options.ApiResources.Single().UserClaims.Add(\"role\");\n});\n\n\nJwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Remove(\"role\");\n</code></pre>\n\n<p>There is an other way, by creating a ProfileService</p>\n\n<p>5) User Authorization mechanisms :</p>\n\n<pre><code>&lt;AuthorizeView Roles=\"admin\"&gt;\n</code></pre>\n\n<p>Source : <a href=\"https://github.com/dotnet/AspNetCore.Docs/blob/master/aspnetcore/security/blazor/webassembly/hosted-with-identity-server.md#Name-and-role-claim-with-API-authorization\" rel=\"nofollow noreferrer\">https://github.com/dotnet/AspNetCore.Docs/blob/master/aspnetcore/security/blazor/webassembly/hosted-with-identity-server.md#Name-and-role-claim-with-API-authorization</a></p>\n"
}