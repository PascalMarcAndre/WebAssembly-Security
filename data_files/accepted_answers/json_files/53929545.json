{
    "owner": {
        "reputation": 15040,
        "user_id": 8605791,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/9ae3be140b26db13a86d624dba4ef1c8?s=128&d=identicon&r=PG&f=1",
        "display_name": "llllllllll",
        "link": "https://stackoverflow.com/users/8605791/llllllllll"
    },
    "is_accepted": true,
    "score": 3,
    "last_activity_date": 1545813691,
    "creation_date": 1545813691,
    "answer_id": 53929545,
    "question_id": 53925972,
    "content_license": "CC BY-SA 4.0",
    "body": "<p>You can construct a WebAssembly module directly from C++ via <code>v8::WasmCompiledModule</code> class (it will be renamed to <code>v8::WasmModuleObject</code> in next version):</p>\n\n<pre><code>    Local&lt;WasmCompiledModule&gt; module = WasmCompiledModule::DeserializeOrCompile(isolate,\n            WasmCompiledModule::BufferReference(0, 0),\n            WasmCompiledModule::BufferReference(wasmbin.data(), wasmbin.size())\n        ).ToLocalChecked();\n</code></pre>\n\n<p>But AFAIK, v8 doesn't expose its webassembly api directly, you have to get them from JS global context. The following code creates a module instance, and gets the <code>exports</code> of the instance:</p>\n\n<pre><code>    using args_type = Local&lt;Value&gt;[];\n\n    Local&lt;Object&gt; module_instance_exports = context-&gt;Global()\n        -&gt;Get(context, String::NewFromUtf8(isolate, \"WebAssembly\"))\n        .ToLocalChecked().As&lt;Object&gt;()\n        -&gt;Get(context, String::NewFromUtf8(isolate, \"Instance\"))\n        .ToLocalChecked().As&lt;Object&gt;()\n        -&gt;CallAsConstructor(context, 1, args_type{module})\n        .ToLocalChecked().As&lt;Object&gt;()\n        -&gt;Get(context, String::NewFromUtf8(isolate, \"exports\"))\n        .ToLocalChecked().As&lt;Object&gt;()\n        ;\n</code></pre>\n\n<p>Then you can get the <code>add</code> function from <code>exports</code> object and call it:</p>\n\n<pre><code>    Local&lt;Int32&gt; adder_res = module_instance_exports\n        -&gt;Get(context, String::NewFromUtf8(isolate, \"add\"))\n        .ToLocalChecked().As&lt;Function&gt;()\n        -&gt;Call(context, context-&gt;Global(), 2, args_type{Int32::New(isolate, 77), Int32::New(isolate, 88)})\n        .ToLocalChecked().As&lt;Int32&gt;();\n\n    std::cout &lt;&lt; \"77 + 88 = \" &lt;&lt; adder_res-&gt;Value() &lt;&lt; \"\\n\";\n</code></pre>\n"
}