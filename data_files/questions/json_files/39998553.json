{
    "tags": [
        "javascript",
        "html",
        "url",
        "url-routing",
        "relative-path"
    ],
    "owner": {
        "reputation": 1895,
        "user_id": 473368,
        "user_type": "registered",
        "accept_rate": 88,
        "profile_image": "https://www.gravatar.com/avatar/4e24aa1cfabf417ef8833ea8721a66a8?s=128&d=identicon&r=PG",
        "display_name": "01AutoMonkey",
        "link": "https://stackoverflow.com/users/473368/01automonkey"
    },
    "is_answered": true,
    "view_count": 198,
    "accepted_answer_id": 40057194,
    "answer_count": 1,
    "score": 0,
    "last_activity_date": 1476522592,
    "creation_date": 1476275047,
    "last_edit_date": 1476275625,
    "question_id": 39998553,
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/39998553/how-can-i-make-all-relative-urls-on-a-html-page-be-relative-to-a-different-domai",
    "title": "How can I make all relative URLs on a HTML page be relative to a different domain then it&#39;s on (in HTML elements as well as JS HTTP Requests)?",
    "body": "<p>I have a page that has \"domain relative URLs\" such as <code>../file/foo</code> or <code>/file/foo</code>, in <code>a href</code> attributes, <code>img src</code> attributes, video, audio, webcomponents, js ajax calls, etc.</p>\n\n<p>Now here's the thing, when the page gets such URLs I want them to be relative to a single specific and different domain then it's actually on, so say the page is on <code>http://localhost:8081/page/</code> the browser will translate them to:</p>\n\n<ul>\n<li><code>http://localhost:8081/page/../file/foo</code></li>\n<li><code>http://localhost:8081/file/foo</code></li>\n</ul>\n\n<p>But what I really want is for all relative URLs to have no relationship to the domain that their on, but rather be in a relationship with another domain, e.x. <code>http://localhost:5462/</code>, and therefor translate to:</p>\n\n<ul>\n<li><code>http://localhost:5462/page/../file/foo</code></li>\n<li><code>http://localhost:5462/file/foo</code></li>\n</ul>\n\n<p>In other words: <strong>I want a page where the URLs it contains, in a-href, ajax calls, etc, never change no matter where you are viewing the page from (so that the page always fetches the same content from the same source), which works out of the box for complete URLs but not for relative URLs. A way to define and enforce a domain that URLs are relative to so that no matter where the page goes its content and behavior stays the same.</strong></p>\n\n<p>So, what options do I have to solve this and which is the best one? Some ideas:</p>\n\n<ul>\n<li>Frontend Solutions\n\n<ol>\n<li>The page is generated from markdown, so I can make a plugin for the markdown to html converter that detects domain relative links and convert them to complete urls, but I've yet to experiment to see if it's really that simple, maybe it will miss links on complex markdown components, or <code>a href</code> and <code>img src</code> defined not using markdown but html, or various types of links inside webcomponent elements, etc (also, this isn't a very universal solution and doesn't work with js)</li>\n<li>Load the page, then load a js that goes over all the links on the page and converts domain relative links to complete urls with correct domain. This might be better but it doesn't change the relationship at a \"fundamental level\" so it will miss domain relative links in javascript, such as ajax calls, or URLs added later in the lifetime of the page.</li>\n<li>Instead of manipulating the dom I could maybe intercept <em>all</em> http calls, clicks, and requests by using js somehow, check if they are domain relative, and alter the call if necessary (this would brake user facing behavior though, like the preview of where the user will go when hovering a link)</li>\n<li>Maybe there exist some kind of a tag like <code>meta</code> with options that I can put in the header of the html that changes the relationship between domain relative links/calls and the domain? I recently discovered the <code>base</code> tag but it seems to only work with HTML elements and not js scripts.</li>\n</ol></li>\n<li>Backend Solutions\n\n<ol start=\"5\">\n<li>Route <code>localhost:5462</code> behind <code>localhost:8081</code> so that all the data from <code>localhost:5462</code> is accessible at <code>localhost:8081</code>, this is very clean and <em>plainly just works</em>, even for js http calls, and I will and already use this in allot of cases with zero problems, but sometimes I don't want to use routing and then I'm back to square one. So this is the result that I want, but I need it without routing as well (that the http requests from the frontend don't go through the backend but to the same URLs as on the original or \"correct\" domain).</li>\n<li>Maybe it's possible to inject some kind of domain info in the response object/header/? when requesting the page from the backend which tricks all http requests on the page to use the \"correct\" domain for domain relative URLs?</li>\n</ol></li>\n<li>Other Solutions\n\n<ol start=\"7\">\n<li>I could <em>ban</em> the use of domain relative links but I need to support <code>file:///</code> as well, which needs relative links, and how would I go about banning it in the first place and do I really want to ban a form of links?</li>\n</ol></li>\n<li>What more solutions are there?</li>\n</ul>\n\n<h2>Some things to consider</h2>\n\n<ul>\n<li>This isn't limited to localhost, it could be domain1.com and domain2.com or any combination of domains, or inside an Electron app, etc.</li>\n<li>Ideally when viewing the source code of the page, \"live inspecting\" it, etc, the links would be unmodified / still look relative, but when you hover a link the indicator of where it goes would show the desired translation of the relative link rather then the default behavior of domain relative links, this \"ideal\" is definitely not attained with some of my suggested solutions.</li>\n<li>Another ideal would be that all user facing behavior would \"just work\" but when viewing source code or any developer facing behavior could be funky (the only user facing behavior I can think of is the preview of where you'll go when hovering a link).</li>\n<li>CORS is not an issue.</li>\n<li>It would be <strong>great</strong> if it worked with any backend setup (a completely frontend solution), but it would also be <em>acceptable</em> if it only works with my particular backend due to technical impossibility or frontend solution being too much of a hack and error prone, or it could require a universally doable modification to any backend.</li>\n<li>My backend is written in Node/Koa.</li>\n</ul>\n\n<hr>\n\n<p>What seems like should be the best solution is something like the <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/base\" rel=\"nofollow\">base</a> tag but which also works for any arbitrary unmodified javascript, instead of <em>just</em> HTML elements.</p>\n\n<p>But if that doesn't exist <em>maybe</em> it's possible to use the <code>base</code> class just for HTML elements, and in conjunction with that use some very neat and non-hacky javascript that successfully intercepts all possible javascript and webassembly http (or any other protocol) requests and directs them to the correct domain if they are using domain relative URLs? And if that <em>really is the best solution</em> and technically feasible, how would I do it?</p>\n"
}