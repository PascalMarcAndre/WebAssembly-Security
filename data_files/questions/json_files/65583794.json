{
    "tags": [
        "azure",
        "blazor",
        "serilog",
        ".net-5"
    ],
    "owner": {
        "reputation": 224,
        "user_id": 5141561,
        "user_type": "registered",
        "accept_rate": 80,
        "profile_image": "https://graph.facebook.com/926750996976/picture?type=large",
        "display_name": "JoeyD",
        "link": "https://stackoverflow.com/users/5141561/joeyd"
    },
    "is_answered": false,
    "view_count": 295,
    "answer_count": 1,
    "score": 2,
    "last_activity_date": 1610363089,
    "creation_date": 1609868097,
    "last_edit_date": 1610027525,
    "question_id": 65583794,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65583794/azure-500-error-on-a-blazor-wasm-hosted-with-authentication",
    "title": "Azure 500 error on a Blazor Wasm Hosted with Authentication",
    "body": "<p>I am at a complete loss here.  I have a Blazor WASM Hosted running .net5 which has been deployed to Azure App Services.  When there was no Database there was no problem deploying to Azure. It loaded and ran as expected.  I have since installed Identity and a DBContext.  Everything builds locally and runs properly with a local SQL instance.</p>\n<p>On Azure, I have created a new SQLServer as well as a SQL database. On the SQL Database Firewall Settings i have &quot;Allow Azure Services and resources to access this server&quot; as well as a Rule for my client IP (not the IP for the Azure App).</p>\n<p>For the App Service in Configuration i have a ConnectionString named DefaultConnection (same as in appsettings.json) with the same connection string as the SQLDatabase provides, source AppConfig, Type SqlAzure</p>\n<p>I am publishing to Azure using the VS2019 Publish on the Server project (the startup project).  I chose Target to be Azure -&gt; Azure App Sevices (Windows) and my instance name.  Configuration is Release, Target Framework net5.0, DeploymentMode Framework-dependent, Target runtime Portable.</p>\n<p>The Service Dependencies is set to AzureSqlDatabase which uses the ConnectionName DefaultConnection, Username and Password are the Admin UserPassword setup for the SQL Server created on Azure and the SaveConnectionStringValue is Azure App Settings.  (This auto populates the App Services Configuration ConnectionString described above.</p>\n<p>When I click publish I see in the output that all publishes correctly:</p>\n<pre><code>Publish Succeeded.\nWeb App was published successfully http://bbqfriend.azurewebsites.net/\n========== Build: 1 succeeded, 0 failed, 6 up-to-date, 0 skipped ==========\n========== Publish: 1 succeeded, 0 failed, 0 skipped ==========\nInstallation of Web App Site extension Microsoft.AspNetCore.AzureAppServices.SiteExtension is in progress...\nRestarting the Web App...\nSuccessfully installed Web App extension Microsoft.AspNetCore.AzureAppServices.SiteExtension\nSuccessfully restarted Web App.\n</code></pre>\n<p>However when the page launches, It shows a 500 Error.</p>\n<p>If I go back to the Publish and Edit the settings -  Database - DefaultConnection and Check the Use this Connection string at runtime selecting the connectionstring configured in the ServiceDependencies as well as the EntityFrameworkMigrations DataContext Apply This Migrations on publish.  When I publish that profile it will do the migrations as well as the Seeds I have defined within the DataContext OnModelCreating override</p>\n<pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n\n            #region Identity Seed\n            modelBuilder.ApplyConfiguration(new ApplicationUserConfiguration());\n            modelBuilder.ApplyConfiguration(new IdentityRoleConfiguration());\n            modelBuilder.ApplyConfiguration(new IdentityUserRoleConfiguration());\n            #endregion\n\n            //modelBuilder.ApplyConfiguration(new CountryConfiguration());\n\n            \n        }\n</code></pre>\n<p>So I know the connection string is correct and there is a Database with the proper model and seeded data. Why am I getting a 500?!?</p>\n<p>Here is my appsettings.json in the Server project</p>\n<pre><code>{\n    &quot;ConnectionStrings&quot;: {\n        &quot;DefaultConnection&quot;: &quot;Server=.;Database={DatabaseName};Trusted_Connection=True;MultipleActiveResultSets=true&quot;\n    },\n    &quot;IdentityServer&quot;: {\n        &quot;Clients&quot;: {\n            &quot;XXXX.Client&quot;: {\n                &quot;Profile&quot;: &quot;IdentityServerSPA&quot;\n            }\n        }\n    },\n    &quot;Serilog&quot;: {\n        &quot;Using&quot;: [ &quot;Serilog.Sinks.MSSqlServer&quot; ],\n        &quot;MinimumLevel&quot;: {\n            &quot;Default&quot;: &quot;Information&quot;,\n            &quot;Override&quot;: {\n                &quot;Microsoft&quot;: &quot;Warning&quot;,\n                &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;,\n                &quot;Microsoft.AspNetCore.Authorization.DefaultAuthorizationService&quot;: &quot;Warning&quot;,\n                &quot;Microsoft.EntityFrameworkCore&quot;: &quot;Warning&quot;,\n                &quot;System&quot;: &quot;Warning&quot;,\n                &quot;System.Net.Http.HttpClient*&quot;: &quot;Warning&quot;,\n                &quot;IdentityServer4&quot;: &quot;Warning&quot;,\n                &quot;Serilog.AspNetCore&quot;: &quot;Warning&quot;\n            }\n        },\n        &quot;WriteTo&quot;: [\n            {\n                &quot;Name&quot;: &quot;MSSqlServer&quot;,\n                &quot;Args&quot;: {\n                    &quot;connectionString&quot;: &quot;DefaultConnection&quot;,\n                    &quot;sinkOptionsSection&quot;: {\n                        &quot;tableName&quot;: &quot;Logs&quot;\n                    },\n                    &quot;columnOptionsSection&quot;: {\n                        &quot;additionalColumns&quot;: [\n                            {\n                                &quot;ColumnName&quot;: &quot;InstanceId&quot;\n                            },\n                            {\n                                &quot;ColumnName&quot;: &quot;Origin&quot;\n                            },\n                            {\n                                &quot;ColumnName&quot;: &quot;SourceContext&quot;\n                            },\n                            {\n                                &quot;ColumnName&quot;: &quot;UserId&quot;\n                            },\n                            {\n                                &quot;ColumnName&quot;: &quot;Username&quot;\n                            }\n                        ],\n                        &quot;excludeAdditionalProperties&quot;: true\n                    }\n                }\n            }\n        ]\n    },\n    &quot;AllowedHosts&quot;: &quot;*&quot;\n}\n</code></pre>\n<p>Here is the Startup.cs for the Server project</p>\n<pre><code>public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n            //Register the Datacontext and Connection String\n            services.AddDbContext&lt;DataContext&gt;(options =&gt;\n                options.UseSqlServer(\n                    Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));\n\n            services.AddDatabaseDeveloperPageExceptionFilter();\n\n            //Sets up the default Asp.net core Identity Screens - Use Identity Scaffolding to override defaults\n            services.AddDefaultIdentity&lt;ApplicationUser&gt;( options =&gt;\n                    {\n                        options.SignIn.RequireConfirmedAccount = true;\n                        options.Password.RequireDigit = true;\n                        options.Password.RequireLowercase = true;\n                        options.Password.RequireUppercase = true;\n                        options.Password.RequiredUniqueChars = 0;\n                        options.Password.RequireNonAlphanumeric = false;\n                        options.Password.RequiredLength = 8;\n                        options.User.RequireUniqueEmail = true;\n                    })\n                .AddRoles&lt;IdentityRole&gt;()\n                .AddEntityFrameworkStores&lt;DataContext&gt;();\n\n            //Associates the User to Context with Identity\n            services.AddIdentityServer()\n                .AddApiAuthorization&lt;ApplicationUser, DataContext&gt;( options =&gt;\n            {\n                options.IdentityResources[&quot;openid&quot;].UserClaims.Add(JwtClaimTypes.Role);\n                options.ApiResources.Single().UserClaims.Add(JwtClaimTypes.Role);\n            });\n            JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Remove(JwtClaimTypes.Role);\n\n            //Adds authentication handler\n            services.AddAuthentication().AddIdentityServerJwt();\n\n            //Register Repositories for Dependency Injection\n            services.AddScoped&lt;ICountryRepository, CountryRepository&gt;();\n\n            services.AddControllersWithViews();\n            services.AddRazorPages();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, DataContext dataContext)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseMigrationsEndPoint();\n                app.UseWebAssemblyDebugging();\n            }\n            else\n            {\n                app.UseExceptionHandler(&quot;/Error&quot;);\n                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n                app.UseHsts();\n            }\n\n            //AutoMigrates data\n            //dataContext.Database.Migrate();\n\n            app.UseHttpsRedirection();\n            app.UseBlazorFrameworkFiles();\n            app.UseStaticFiles();\n\n            app.UseSerilogIngestion();\n            app.UseSerilogRequestLogging();\n\n            app.UseRouting();\n\n            app.UseIdentityServer();\n            app.UseAuthentication();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =&gt;\n            {\n                endpoints.MapRazorPages();\n                endpoints.MapControllers();\n                endpoints.MapFallbackToFile(&quot;index.html&quot;);\n            });\n        }\n    }\n</code></pre>\n<p>Here is the Program.cs for the Server project</p>\n<pre><code>public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var configuration = new ConfigurationBuilder()\n                .SetBasePath(Directory.GetCurrentDirectory())\n                .AddJsonFile(&quot;appsettings.json&quot;)\n                .Build();\n\n            Log.Logger = new LoggerConfiguration()\n                .ReadFrom.Configuration(configuration)\n                .Enrich.WithProperty(&quot;InstanceId&quot;, Guid.NewGuid())\n                .Enrich.WithProperty(&quot;Origin&quot;, &quot;Server&quot;)\n                .CreateLogger();\n\n            try\n            {\n                Log.Information(&quot;Starting up&quot;);\n                CreateHostBuilder(args).Build().Run();\n            }\n            catch (Exception ex)\n            {\n                Log.Fatal(ex, &quot;Application start-up failed&quot;);\n            }\n            finally\n            {\n                Log.CloseAndFlush();\n            }\n\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =&gt;\n            Host.CreateDefaultBuilder(args)\n                .UseSerilog()\n                .ConfigureWebHostDefaults(webBuilder =&gt;\n                {\n                    webBuilder.UseStartup&lt;Startup&gt;();\n                });\n    }\n</code></pre>\n<p>Here is the Program.cs for the Client project</p>\n<pre><code>public static async Task Main(string[] args)\n        {\n            //Serilog \n            var levelSwitch = new LoggingLevelSwitch();\n            Log.Logger = new LoggerConfiguration()\n                .MinimumLevel.ControlledBy(levelSwitch)\n                .Enrich.WithProperty(&quot;InstanceId&quot;, Guid.NewGuid())\n                .Enrich.FromLogContext()\n                .WriteTo.BrowserHttp(controlLevelSwitch: levelSwitch)\n                .CreateLogger();            \n\n            Log.ForContext&lt;Program&gt;().Information(&quot;Client has started&quot;);\n\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add&lt;App&gt;(&quot;#app&quot;);\n\n            builder.Services.AddLogging(logging =&gt;\n           {\n               logging.ClearProviders();\n               logging.AddSerilog(dispose: true);\n           });\n\n            builder.Services.AddHttpClient(&quot;XXX.ServerAPI&quot;, client =&gt; client.BaseAddress = new Uri(builder.HostEnvironment.BaseAddress))\n                .AddHttpMessageHandler&lt;BaseAddressAuthorizationMessageHandler&gt;();\n\n            // Supply HttpClient instances that include access tokens when making requests to the server project\n            builder.Services.AddTransient(sp =&gt; \n                sp.GetRequiredService&lt;IHttpClientFactory&gt;()\n                .CreateClient(&quot;XXXX.ServerAPI&quot;));\n\n            builder.Services.AddApiAuthorization()\n                .AddAccountClaimsPrincipalFactory&lt;RolesClaimsPrincipalFactory&gt;();\n\n            //Register Services\n            var baseAddress = new Uri($&quot;{builder.HostEnvironment.BaseAddress}api/&quot;);\n            void RegisterTypedClient&lt;TClient, TImplementation&gt;(Uri apiBaseUrl)\n                where TClient : class where TImplementation : class, TClient\n            {\n                builder.Services.AddHttpClient&lt;TClient, TImplementation&gt;(client =&gt; client.BaseAddress = apiBaseUrl)\n                    .AddHttpMessageHandler&lt;BaseAddressAuthorizationMessageHandler&gt;();\n            }\n\n            RegisterTypedClient&lt;ICountryService, CountryService&gt;(baseAddress);\n\n\n            await builder.Build().RunAsync();\n        }\n</code></pre>\n<p>I do have Serilog configured and it looks to be working as well.  Here are the error messages I am seeing during the Server Launch</p>\n<pre><code>System.InvalidOperationException: Startup assembly Microsoft.ApplicationInsights.StartupBootstrapper failed to execute. See the inner exception for more details.\n ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.ApplicationInsights.StartupBootstrapper, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified.\nFile name: 'Microsoft.ApplicationInsights.StartupBootstrapper, Culture=neutral, PublicKeyToken=null'\n   at System.Reflection.RuntimeAssembly.InternalLoad(ObjectHandleOnStack assemblyName, ObjectHandleOnStack requestingAssembly, StackCrawlMarkHandle stackMark, Boolean throwOnFileNotFound, ObjectHandleOnStack assemblyLoadContext, ObjectHandleOnStack retAssembly)\n   at System.Reflection.RuntimeAssembly.InternalLoad(AssemblyName assemblyName, RuntimeAssembly requestingAssembly, StackCrawlMark&amp; stackMark, Boolean throwOnFileNotFound, AssemblyLoadContext assemblyLoadContext)\n   at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\n   at Microsoft.AspNetCore.Hosting.GenericWebHostBuilder.ExecuteHostingStartups()\n   --- End of inner exception stack trace ---\n</code></pre>\n<p>and</p>\n<pre><code> System.InvalidOperationException: Startup assembly DiagnosticServices.HostingStartup failed to execute. See the inner exception for more details.\n ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'DiagnosticServices.HostingStartup, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified.\nFile name: 'DiagnosticServices.HostingStartup, Culture=neutral, PublicKeyToken=null'\n   at System.Reflection.RuntimeAssembly.InternalLoad(ObjectHandleOnStack assemblyName, ObjectHandleOnStack requestingAssembly, StackCrawlMarkHandle stackMark, Boolean throwOnFileNotFound, ObjectHandleOnStack assemblyLoadContext, ObjectHandleOnStack retAssembly)\n   at System.Reflection.RuntimeAssembly.InternalLoad(AssemblyName assemblyName, RuntimeAssembly requestingAssembly, StackCrawlMark&amp; stackMark, Boolean throwOnFileNotFound, AssemblyLoadContext assemblyLoadContext)\n   at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\n   at Microsoft.AspNetCore.Hosting.GenericWebHostBuilder.ExecuteHostingStartups()\n   --- End of inner exception stack trace ---\n</code></pre>\n<p><strong>UPDATE</strong>\nI am able to replicate the above error messages and they are logged into the Database via Serilog.</p>\n<p><a href=\"https://i.stack.imgur.com/qLOKW.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/qLOKW.png\" alt=\"enter image description here\" /></a></p>\n<p>So we can see the &quot;Starting up&quot; from the Server Program.cs Main method (above) and the next entry is from the EntityFramework Model Validation.  Then comes the errors.  I can see the Namespace as Microsoft.AspNetCore.Hosting.Diagnostics as the source of the exception.</p>\n<ol>\n<li><p>I attempted to add a Nuget reference  but that did nothing</p>\n</li>\n<li><p>I attempted to add a reference to  added services.AddApplicationInsightsTelemetry(); to the Server Startup.cs ConfigureServices and the ApplicationInsights InstrumentationKey to the appsettings.json (which already existed within Azure as a Variable)  but that did nothing</p>\n</li>\n<li><p>I added a reference to  and added</p>\n</li>\n</ol>\n<pre><code>public static IHostBuilder CreateHostBuilder(string[] args) =&gt;\n            Host.CreateDefaultBuilder(args)\n                .UseSerilog()\n                .ConfigureWebHostDefaults(webBuilder =&gt;\n                {\n                    webBuilder.UseStartup&lt;Startup&gt;().UseAzureAppServices();\n                });\n\n</code></pre>\n<p>as per a workaround found here <a href=\"https://github.com/dotnet/extensions/issues/2566\" rel=\"nofollow noreferrer\">https://github.com/dotnet/extensions/issues/2566</a> which did not help</p>\n<p><strong>Update Day 2</strong></p>\n<p>Adding more information as I am still getting the same exceptions. Im curious if this is a compatibility issue between versions.  My application is .net5 and running on Azure using .net5 early access.</p>\n<p>Here are my Nuget packages for the Server Project</p>\n<pre><code>&lt;ItemGroup&gt;\n    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly.Server&quot; Version=&quot;5.0.1&quot; /&gt;\n  &lt;/ItemGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore&quot; Version=&quot;5.0.1&quot; /&gt;\n    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Identity.EntityFrameworkCore&quot; Version=&quot;5.0.1&quot; /&gt;\n    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Identity.UI&quot; Version=&quot;5.0.1&quot; /&gt;\n    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.ApiAuthorization.IdentityServer&quot; Version=&quot;5.0.1&quot; /&gt;\n    &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.SqlServer&quot; Version=&quot;5.0.1&quot; /&gt;\n    &lt;PackageReference Include=&quot;Microsoft.EntityFrameworkCore.Tools&quot; Version=&quot;5.0.1&quot;&gt;\n      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;\n      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;\n    &lt;/PackageReference&gt;\n    &lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration&quot; Version=&quot;5.0.0&quot; /&gt;\n    &lt;PackageReference Include=&quot;Microsoft.VisualStudio.Web.CodeGeneration.Design&quot; Version=&quot;5.0.1&quot; /&gt;\n    &lt;PackageReference Include=&quot;Serilog.AspNetCore&quot; Version=&quot;3.4.0&quot; /&gt;\n    &lt;PackageReference Include=&quot;Serilog.AspNetCore.Ingestion&quot; Version=&quot;1.0.0-dev-00012&quot; /&gt;\n    &lt;PackageReference Include=&quot;Serilog.Settings.Configuration&quot; Version=&quot;3.1.0&quot; /&gt;\n    &lt;PackageReference Include=&quot;Serilog.Sinks.MSSqlServer&quot; Version=&quot;5.6.0&quot; /&gt;\n  &lt;/ItemGroup&gt;\n</code></pre>\n<p>Here are the Nuget Packages for the Client project</p>\n<pre><code>&lt;ItemGroup&gt;\n    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly&quot; Version=&quot;5.0.1&quot; /&gt;\n    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly.Authentication&quot; Version=&quot;5.0.1&quot; /&gt;\n    &lt;PackageReference Include=&quot;Microsoft.AspNetCore.Components.WebAssembly.DevServer&quot; Version=&quot;5.0.1&quot; /&gt;\n    &lt;PackageReference Include=&quot;Microsoft.Extensions.Http&quot; Version=&quot;5.0.0&quot; /&gt;\n    &lt;PackageReference Include=&quot;Serilog.Extensions.Logging&quot; Version=&quot;3.0.1&quot; /&gt;\n    &lt;PackageReference Include=&quot;Serilog.Sinks.BrowserHttp&quot; Version=&quot;1.0.0-dev-00012&quot; /&gt;\n    &lt;PackageReference Include=&quot;System.Net.Http.Json&quot; Version=&quot;5.0.0&quot; /&gt;\n  &lt;/ItemGroup&gt;\n</code></pre>\n<p>I have tried removing Serilog from both the Client and Server projects. I still received a 500.</p>\n<p>With Serilog Removed I tried using .UseAzureAppServices() from <a href=\"https://github.com/dotnet/extensions/issues/2566\" rel=\"nofollow noreferrer\">https://github.com/dotnet/extensions/issues/2566</a> with no luck as well.</p>\n<p>I did notice an additional error messsage</p>\n<pre><code>2021-01-06 19:00:38.322 +00:00 [Error] Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware: An unhandled exception has occurred while executing the request.\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at Microsoft.Extensions.DependencyInjection.IdentityServerBuilderConfigurationExtensions.&lt;&gt;c.&lt;AddSigningCredentials&gt;b__10_2(IServiceProvider sp)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, RuntimeResolverContext context)\n   at ... (removed for post size) \n</code></pre>\n<p><em><strong>I have been able to isolate this to becoming an issue when I deployed my site as a Blazor WebAssembly Hosted solution.  I was able to get a version of my site which was upgraded to .net5 PRE switching from Blazor WebAssembly to Blazor WebAssembly Hosted.  The .net5 version was able to be deployed to Azure without issues.  When deploying the WebAssembly Hosted version is when I got 500 Errors.  So this has to do with deploying a Blazor WebAssembly Hosted solution to Azure.</strong></em></p>\n<p>I also experimented by creating an out of the box Blazor WebAssembly Hosted solution without Authentication and deployed it to Azure.  This works with no issues.  HOWEVER, when I create an out of the box Blazor WebAssembly Hosted WITH Authentication (individual user accounts stored in app) and deployed it to Azure it fails with 500!</p>\n"
}