{
    "tags": [
        ".net-core",
        "blazor"
    ],
    "owner": {
        "reputation": 14554,
        "user_id": 385326,
        "user_type": "registered",
        "accept_rate": 48,
        "profile_image": "https://www.gravatar.com/avatar/b2173906f37003c05fd354d54f1f19f9?s=128&d=identicon&r=PG",
        "display_name": "dotnetstep",
        "link": "https://stackoverflow.com/users/385326/dotnetstep"
    },
    "is_answered": true,
    "view_count": 63,
    "answer_count": 1,
    "score": 0,
    "last_activity_date": 1617009748,
    "creation_date": 1616928705,
    "question_id": 66840642,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/66840642/dynamic-property-and-child-model-not-binding",
    "title": "Dynamic Property and Child Model Not Binding",
    "body": "<p>I want to build dynamic form using Blazor.</p>\n<p>Here is my sample component.</p>\n<pre><code>    @page &quot;/customform&quot;\n\n    @using System.Dynamic\n    @using System.Text.Json\n \n    @inject IJSRuntime JSRuntime;\n\n    &lt;div class=&quot;card m-3&quot;&gt;\n    &lt;h4 class=&quot;card-header&quot;&gt;Blazor WebAssembly Form Validation Example&lt;/h4&gt;\n    &lt;div class=&quot;card-body&quot;&gt;\n        &lt;EditForm EditContext=&quot;@editContext&quot;\n                  OnValidSubmit=&quot;HandleValidSubmit&quot;&gt;\n            &lt;DataAnnotationsValidator&gt;&lt;/DataAnnotationsValidator&gt;\n           \n            @foreach (var field in Model.Fields)\n        {\n\n            &lt;div class=&quot;form-group&quot;&gt;\n                &lt;label&gt;@field.Name&lt;/label&gt;\n                &lt;input @bind-value=&quot;field.Value&quot; class=&quot;form-control&quot; /&gt;\n                &lt;ValidationMessage For=&quot;(()=&gt; field.Value)&quot; /&gt;\n                &lt;ValidationMessage For=&quot;(()=&gt; field.Name)&quot; /&gt;\n                &lt;ValidationMessage For=&quot;(()=&gt; field)&quot; /&gt;\n\n            &lt;/div&gt;\n\n        }\n            &lt;div class=&quot;form-group&quot;&gt;\n                &lt;label&gt;Address&lt;/label&gt;\n                &lt;input @bind-value=&quot;Model.Address&quot; class=&quot;form-control&quot; /&gt;\n                &lt;ValidationMessage For=&quot;()=&gt; Model.Address&quot; /&gt;\n\n            &lt;/div&gt;\n            &lt;div class=&quot;form-group&quot;&gt;\n                &lt;label&gt;Child&lt;/label&gt;\n                &lt;input @bind-value=&quot;Model.ChildModel.ChildName&quot; class=&quot;form-control&quot; /&gt;\n                &lt;ValidationMessage For=&quot;()=&gt; Model.ChildModel.ChildName&quot; /&gt;\n\n            &lt;/div&gt;\n            &lt;div class=&quot;text-left&quot;&gt;\n                &lt;button class=&quot;btn btn-primary&quot; type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n            &lt;/div&gt;\n\n        &lt;/EditForm&gt;\n    &lt;/div&gt;\n         &lt;/div&gt;\n\n      @code{\n\n    private SampleModel Model = new SampleModel();\n    private EditContext editContext;\n    private ValidationMessageStore _messageStore;\n\n    protected override void OnInitialized()\n    {\n\n        editContext = new EditContext(Model);\n        editContext.OnValidationRequested += ValidationRequested;\n        _messageStore = new ValidationMessageStore(editContext);      \n    }\n\n    private void HandleValidSubmit(EditContext context)\n    {\n        var modelJson = JsonSerializer.Serialize(context.Model, new JsonSerializerOptions { WriteIndented = true });\n        JSRuntime.InvokeVoidAsync(&quot;alert&quot;, $&quot;SUCCESS!! :-)\\n\\n{modelJson}&quot;);\n       \n    }\n\n    async void ValidationRequested(object sender, ValidationRequestedEventArgs args)\n    {\n        _messageStore.Add(editContext.Field(&quot;FirstName&quot;), &quot;Test&quot;);\n        _messageStore.Add(editContext.Field(&quot;Address&quot;), &quot;Invalid Address&quot;);\n        _messageStore.Add(editContext.Field(&quot;ChildModel.ChildName&quot;), &quot;Invalid Child Name&quot;);\n        editContext.NotifyValidationStateChanged();\n    }\n\n    \n\n    public class SampleModel\n    {\n\n        public string Address { get; set; }\n\n        public ChildModel ChildModel { get; set; }\n        public List&lt;Field&gt; Fields { get; set; }\n        public SampleModel()\n        {\n            this.ChildModel = new ChildModel();\n            this.Fields = new List&lt;Field&gt;();\n            this.Fields.Add(new Field()\n            {\n                Name = &quot;FirstName&quot;,\n                Value = &quot;&quot;,\n                ControlType = ControlType.Input\n            });\n            this.Fields.Add(new Field()\n            {\n                Name = &quot;LastName&quot;,\n                Value = &quot;&quot;,\n                ControlType = ControlType.Input\n            });\n        }\n    }\n\n    public class ChildModel\n    {\n        public string ChildName { get; set; }\n    }\n\n    public enum ControlType\n    {\n        Input\n    }\n\n    public class Field\n    {\n        public string Value { get; set; }\n        public string Name { get; set; }\n        public string DisplayName { get; set; }\n        public ControlType ControlType { get; set; }\n\n\n    }\n\n    \n}\n</code></pre>\n<p>Currently I am facing too many issues.</p>\n<ol>\n<li>If I use For lookup instead of For each it is not working</li>\n<li>ChildModel seems to be bind but its validation is not working</li>\n<li>Dynamically generated based on Fields collection control does not display validation.</li>\n<li>Only address in SimpleModel display validation.</li>\n</ol>\n<p>Is there any suggestion or help around this ?</p>\n"
}