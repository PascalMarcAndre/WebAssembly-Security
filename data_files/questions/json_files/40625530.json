{
    "tags": [
        "c++",
        "emscripten",
        "webassembly"
    ],
    "owner": {
        "reputation": 1244,
        "user_id": 308341,
        "user_type": "registered",
        "accept_rate": 100,
        "profile_image": "https://www.gravatar.com/avatar/fba48015a688c38cc84e5b55b07858c0?s=128&d=identicon&r=PG",
        "display_name": "Juan Picado",
        "link": "https://stackoverflow.com/users/308341/juan-picado"
    },
    "is_answered": true,
    "view_count": 1557,
    "accepted_answer_id": 40625922,
    "answer_count": 1,
    "score": 4,
    "last_activity_date": 1479425510,
    "creation_date": 1479278120,
    "question_id": 40625530,
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/40625530/webassembly-demo-guide-fails-due-missing-files",
    "title": "WebAssembly demo guide fails due missing files",
    "body": "<p>Following step by step the Developer's Guide it fails for me on MAC.</p>\n\n<p><a href=\"http://webassembly.org/getting-started/developers-guide/\" rel=\"nofollow noreferrer\">http://webassembly.org/getting-started/developers-guide/</a></p>\n\n<p>I have a clean mac installation <code>10.11.6 (15G31)</code> and here is the log.</p>\n\n<pre>\n\n    Mac-MBP:emsdk_portable wasm$ ./emsdk activate clang-incoming-64bit emscripten-incoming-64bit sdk-incoming-64bit\n    Writing .emscripten configuration file to user home directory /Users/wasm/\n    The Emscripten configuration file /Users/wasm/.emscripten has been rewritten with the following contents:\n\n    import os\n    LLVM_ROOT='/Users/wasm/repo/webassembly/emsdk_portable/clang/fastcomp/build_incoming_64/bin'\n    NODE_JS='/Users/wasm/repo/webassembly/emsdk_portable/node/4.1.1_64bit/bin/node'\n    EMSCRIPTEN_ROOT='/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming'\n    EMSCRIPTEN_NATIVE_OPTIMIZER='/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming_64bit_optimizer/optimizer'\n    SPIDERMONKEY_ENGINE = ''\n    V8_ENGINE = ''\n    TEMP_DIR = '/var/folders/wk/mngy_vmn0xs6j32tm53vvg7m0000gn/T'\n    COMPILER_ENGINE = NODE_JS\n    JS_ENGINES = [NODE_JS]\n\n    To conveniently access the selected set of tools from the command line, consider adding the following directories to PATH, or call 'source ./emsdk_env.sh' to do this for you.\n\n       /Users/wasm/repo/webassembly/emsdk_portable:/Users/wasm/repo/webassembly/emsdk_portable/clang/fastcomp/build_incoming_64/bin:/Users/wasm/repo/webassembly/emsdk_portable/node/4.1.1_64bit/bin:/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming\n    Mac-MBP:emsdk_portable wasm$ source ./emsdk_env.sh\n    Adding directories to PATH:\n    PATH += /Users/wasm/repo/webassembly/emsdk_portable\n    PATH += /Users/wasm/repo/webassembly/emsdk_portable/clang/fastcomp/build_incoming_64/bin\n    PATH += /Users/wasm/repo/webassembly/emsdk_portable/node/4.1.1_64bit/bin\n    PATH += /Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming\n\n    Setting environment variables:\n    EM_CONFIG = /Users/wasm/.emscripten\n    EMSCRIPTEN = /Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming\n\n    Mac-MBP:emsdk_portable wasm$ cd ..\n    Mac-MBP:webassembly wasm$ emmc --version\n    -bash: emmc: command not found\n    Mac-MBP:webassembly wasm$ emcc --version\n    INFO:root:generating system asset: is_vanilla.txt... (this will be cached in \"/Users/wasm/.emscripten_cache/is_vanilla.txt\" for subsequent builds)\n    INFO:root: - ok\n    emcc (Emscripten gcc/clang-like replacement) 1.36.14 (commit ca2685c89546ce5f7c01e1bc769b7d2a401093dc)\n    Copyright (C) 2014 the Emscripten authors (see AUTHORS.txt)\n    This is free and open source software under the MIT license.\n    There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n    Mac-MBP:webassembly wasm$ \n    Mac-MBP:webassembly wasm$ mkdir hello\n    Mac-MBP:webassembly wasm$ cd hello\n    Mac-MBP:hello wasm$ echo '#include ' > hello.c\n    Mac-MBP:hello wasm$ echo 'int main(int argc, char ** argv) {' >> hello.c\n    Mac-MBP:hello wasm$ echo 'printf(\"Hello, world!\\n\");' >> hello.c\n    Mac-MBP:hello wasm$ echo '}' >> hello.c\n    Mac-MBP:hello wasm$ emcc hello.c -s WASM=1 -o hello.html\n    INFO:root:(Emscripten: Running sanity checks)\n    WARNING:root:retrieving port: binaryen from https://github.com/WebAssembly/binaryen/archive/version_21.zip\n    WARNING:root:unpacking port: binaryen\n    INFO:root:generating port: binaryen_tag_version_21.txt... (this will be cached in \"/Users/wasm/.emscripten_cache/asmjs/binaryen_tag_version_21.txt\" for subsequent builds)\n    INFO:root:building port: binaryen\n    -- The C compiler identification is Clang 3.9.0\n    -- The CXX compiler identification is Clang 3.9.0\n    -- Check for working C compiler: /Users/wasm/repo/webassembly/emsdk_portable/clang/fastcomp/build_incoming_64/bin/clang\n    -- Check for working C compiler: /Users/wasm/repo/webassembly/emsdk_portable/clang/fastcomp/build_incoming_64/bin/clang -- works\n    -- Detecting C compiler ABI info\n    -- Detecting C compiler ABI info - done\n    -- Check for working CXX compiler: /Users/wasm/repo/webassembly/emsdk_portable/clang/fastcomp/build_incoming_64/bin/clang++\n    -- Check for working CXX compiler: /Users/wasm/repo/webassembly/emsdk_portable/clang/fastcomp/build_incoming_64/bin/clang++ -- works\n    -- Detecting CXX compiler ABI info\n    -- Detecting CXX compiler ABI info - done\n    -- Looking for pthread.h\n    -- Looking for pthread.h - found\n    -- Looking for pthread_create\n    -- Looking for pthread_create - found\n    -- Found Threads: TRUE  \n    -- Building with -std=c++11\n    -- Building with -msse2\n    -- Building with -mfpmath=sse\n    -- Building with -Wall\n    -- Building with -Werror\n    -- Building with -Wextra\n    -- Building with -Wno-unused-parameter\n    -- Building with -fno-omit-frame-pointer\n    -- Building with -fPIC\n    -- Building with -O2\n    -- Building with -UNDEBUG\n    -- Configuring done\n    CMake Warning (dev):\n      Policy CMP0042 is not set: MACOSX_RPATH is enabled by default.  Run \"cmake\n      --help-policy CMP0042\" for policy details.  Use the cmake_policy command to\n      set the policy and suppress this warning.\n\n      MACOSX_RPATH is not specified for the following targets:\n\n       binaryen\n\n    This warning is for project developers.  Use -Wno-dev to suppress it.\n\n    -- Generating done\n    -- Build files have been written to: /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21\n    Scanning dependencies of target wasm\n    Scanning dependencies of target asmjs\n    Scanning dependencies of target support\n    Scanning dependencies of target passes\n    [  1%] Building CXX object src/support/CMakeFiles/support.dir/archive.cpp.o\n    [  2%] Building CXX object src/asmjs/CMakeFiles/asmjs.dir/asm_v_wasm.cpp.o\n    [  4%] Building CXX object src/wasm/CMakeFiles/wasm.dir/wasm.cpp.o\n    In file included from /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/support/archive.cpp:17:\n    /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/support/archive.h:27:10: fatal error: 'cstdint' file not found\n    In file included from /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/asmjs/asm_v_wasm.cpp:17:\n    In file included from /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/asm_v_wasm.h:20:\n    /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/mixed_arena.h:20:10: fatal error: 'atomic' file not found\n    #include \n             ^\n    #include \n             ^\n    In file included from /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/wasm/wasm.cpp:17:\n    /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/wasm.h:46:10: fatal error: 'cassert' file not found\n    #include \n             ^\n    [  5%] Building CXX object src/passes/CMakeFiles/passes.dir/pass.cpp.o\n    /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/passes/pass.cpp:17:10: fatal error: 'chrono' file not found\n    #include \n             ^\n    1 error generated.\n    1 error generated.\n    make[2]: *** [src/support/CMakeFiles/support.dir/archive.cpp.o] Error 1\n    make[1]: *** [src/support/CMakeFiles/support.dir/all] Error 2make[2]: \n    *** [src/asmjs/CMakeFiles/asmjs.dir/asm_v_wasm.cpp.o] Error 1\n    make[1]: *** Waiting for unfinished jobs....\n    make[1]: *** [src/asmjs/CMakeFiles/asmjs.dir/all] Error 2\n    [  8%] Building CXX object src/passes/CMakeFiles/passes.dir/CoalesceLocals.cpp.o\n    [  8%] Building CXX object src/wasm/CMakeFiles/wasm.dir/wasm-binary.cpp.o\n    1 error generated.\n    make[2]: *** [src/wasm/CMakeFiles/wasm.dir/wasm.cpp.o] Error 1\n    make[2]: *** Waiting for unfinished jobs....\n    In file included from /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/wasm/wasm-binary.cpp:17:\n    /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/wasm-binary.h:24:10: fatal error: 'cassert' file not found\n    #include \n             ^\n    /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/passes/CoalesceLocals.cpp:25:10: fatal error: 'algorithm' file not found\n    #include \n             ^\n    [ 10%] Building CXX object src/passes/CMakeFiles/passes.dir/CodePushing.cpp.o\n    1 error generated.\n    make[2]: *** [src/passes/CMakeFiles/passes.dir/pass.cpp.o] Error 1\n    make[2]: *** Waiting for unfinished jobs....\n    In file included from /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/passes/CodePushing.cpp:22:\n    /Users/wasm/.emscripten_ports/binaryen/binaryen-version_21/src/wasm.h:46:10: fatal error: 'cassert' file not found\n    #include \n             ^\n    1 error generated.\n    make[2]: *** [src/passes/CMakeFiles/passes.dir/CoalesceLocals.cpp.o] Error 1\n    1 error generated.\n    make[2]: *** [src/passes/CMakeFiles/passes.dir/CodePushing.cpp.o] Error 1\n    make[1]: *** [src/passes/CMakeFiles/passes.dir/all] Error 2\n    1 error generated.\n    make[2]: *** [src/wasm/CMakeFiles/wasm.dir/wasm-binary.cpp.o] Error 1\n    make[1]: *** [src/wasm/CMakeFiles/wasm.dir/all] Error 2\n    make: *** [all] Error 2\n    Traceback (most recent call last):\n      File \"/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/emcc\", line 13, in \n        emcc.run()\n      File \"/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/emcc.py\", line 1334, in run\n        compile_source_file(i, input_file)\n      File \"/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/emcc.py\", line 1323, in compile_source_file\n        args = get_bitcode_args([input_file]) + ['-emit-llvm', '-c', '-o', output_file]\n      File \"/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/emcc.py\", line 1306, in get_bitcode_args\n        args = system_libs.process_args(args, shared.Settings)\n      File \"/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/tools/system_libs.py\", line 636, in process_args\n        args = port.process_args(Ports, args, settings, shared)\n      File \"/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/tools/ports/binaryen.py\", line 34, in process_args\n        get(ports, settings, shared)\n      File \"/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/tools/ports/binaryen.py\", line 29, in get\n        return [shared.Cache.get('binaryen_tag_' + TAG, create, what='port', extension='.txt')]\n      File \"/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/tools/cache.py\", line 95, in get\n        temp = creator()\n      File \"/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/tools/ports/binaryen.py\", line 24, in create\n        ports.build_native(os.path.join(ports.get_dir(), 'binaryen', 'binaryen-' + TAG))\n      File \"/Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/tools/system_libs.py\", line 607, in build_native\n        subprocess.check_call(['cmake', '--build', '.'] + make_args, env=env)\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py\", line 540, in check_call\n        raise CalledProcessError(retcode, cmd)\n    subprocess.CalledProcessError: Command '['cmake', '--build', '.', '--', '-j', '4']' returned non-zero exit status 2\n    Mac-MBP:hello wasm$ emcc hello.c -s WASM=1 -o hello.htmlc\n    Mac-MBP:hello wasm$ whi\n    which  while  \n    Mac-MBP:hello wasm$ whi\n    which  while  \n    Mac-MBP:hello wasm$ which emcc\n    /Users/wasm/repo/webassembly/emsdk_portable/emscripten/incoming/emcc\n    Mac-MBP:hello wasm$ \n    Mac-MBP:hello wasm$ clang -v\n    clang version 3.9.0 (https://github.com/kripken/emscripten-fastcomp-clang/ b6ea91778b2b30e6746f2a5f2baba463948729a4) (https://github.com/kripken/emscripten-fastcomp/ dfcb07a871addf339ffac17e606e16e97e8c5f71) (emscripten 1.36.14 : 1.36.14)\n    Target: x86_64-apple-darwin15.6.0\n    Thread model: posix\n    InstalledDir: /Users/wasm/repo/webassembly/emsdk_portable/clang/fastcomp/build_incoming_64/bin\n    Mac-MBP:hello wasm$ \n\n</pre>\n"
}