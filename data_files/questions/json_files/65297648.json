{
    "tags": [
        "authorization",
        "blazor",
        "asp.net-core-identity",
        "blazor-webassembly"
    ],
    "owner": {
        "reputation": 224,
        "user_id": 5141561,
        "user_type": "registered",
        "accept_rate": 80,
        "profile_image": "https://graph.facebook.com/926750996976/picture?type=large",
        "display_name": "JoeyD",
        "link": "https://stackoverflow.com/users/5141561/joeyd"
    },
    "is_answered": false,
    "view_count": 98,
    "answer_count": 0,
    "score": 0,
    "last_activity_date": 1607988144,
    "creation_date": 1607986250,
    "question_id": 65297648,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65297648/blazor-webassembly-hosted-authorizeview-not-recognizing-roles",
    "title": "Blazor WebAssembly Hosted AuthorizeView not recognizing Roles",
    "body": "<p>I have a Blazor WebAssembly Hosted using core identity and identity server.  I have set it up to use role based authorization, however, when I use an authorizeview it is not recognizing the roles.</p>\n<p>Here is a sample of an Authorize view that should only be seen by an Administrator</p>\n<pre><code>&lt;AuthorizeView Roles=&quot;Administrator&quot;&gt;\n    &lt;Authorized&gt;\n        &lt;li class=&quot;nav-item sideMenu-nav-item&quot;&gt;\n            &lt;NavLink class=&quot;nav-link sideMenu-nav-item-link&quot; href=&quot;authentication/register&quot;&gt;&lt;span data-toggle=&quot;collapse&quot; data-target=&quot;#sideMenu&quot;&gt;Register&lt;/span&gt;&lt;/NavLink&gt;\n        &lt;/li&gt;\n        &lt;li class=&quot;nav-item sideMenu-nav-item&quot;&gt;\n            &lt;NavLink class=&quot;nav-link sideMenu-nav-item-link&quot; href=&quot;authentication/login&quot;&gt;&lt;span data-toggle=&quot;collapse&quot; data-target=&quot;#sideMenu&quot;&gt;Log in&lt;/span&gt;&lt;/NavLink&gt;\n        &lt;/li&gt;\n    &lt;/Authorized&gt;\n    &lt;NotAuthorized&gt;\n        &lt;li&gt;Not an Admin&lt;/li&gt;\n    &lt;/NotAuthorized&gt;\n&lt;/AuthorizeView&gt;\n</code></pre>\n<p>Here is the standard Login provided by Identity scaffolder which is on the Server project</p>\n<pre><code>public async Task&lt;IActionResult&gt; OnPostAsync(string returnUrl = null)\n        {\n            returnUrl ??= Url.Content(&quot;~/&quot;);\n\n            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();\n        \n            if (ModelState.IsValid)\n            {\n                // This doesn't count login failures towards account lockout\n                // To enable password failures to trigger account lockout, set lockoutOnFailure: true\n                var result = await _signInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, lockoutOnFailure: false);\n                if (result.Succeeded)\n                {\n                    _logger.LogInformation(&quot;User logged in.&quot;);\n                    return LocalRedirect(returnUrl);\n                }\n                if (result.RequiresTwoFactor)\n                {\n                    return RedirectToPage(&quot;./LoginWith2fa&quot;, new { ReturnUrl = returnUrl, RememberMe = Input.RememberMe });\n                }\n                if (result.IsLockedOut)\n                {\n                    _logger.LogWarning(&quot;User account locked out.&quot;);\n                    return RedirectToPage(&quot;./Lockout&quot;);\n                }\n                else\n                {\n                    ModelState.AddModelError(string.Empty, &quot;Invalid login attempt.&quot;);\n                    return Page();\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return Page();\n        }\n</code></pre>\n<p>Here is my Server project Startup.cs.  You can see i added the support for IdentityRole in the configureServices.</p>\n<pre><code>public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n            //Register the Datacontext and Connection String\n            services.AddDbContext&lt;DataContext&gt;(options =&gt;\n                options.UseSqlServer(\n                    Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));\n\n            services.AddDatabaseDeveloperPageExceptionFilter();\n\n            //Sets up the default Asp.net core Identity Screens - Use Identity Scaffolding to override defaults\n            services.AddDefaultIdentity&lt;ApplicationUser&gt;( options =&gt;\n                    {\n                        options.SignIn.RequireConfirmedAccount = true;\n                        options.Password.RequireDigit = true;\n                        options.Password.RequireLowercase = true;\n                        options.Password.RequireUppercase = true;\n                        options.Password.RequiredUniqueChars = 0;\n                        options.Password.RequireNonAlphanumeric = false;\n                        options.Password.RequiredLength = 8;\n                        options.User.RequireUniqueEmail = true;\n                    })\n                .AddRoles&lt;IdentityRole&gt;()\n                .AddEntityFrameworkStores&lt;DataContext&gt;();\n\n            //Associates the User to Context with Identity\n            services.AddIdentityServer()\n                .AddApiAuthorization&lt;ApplicationUser, DataContext&gt;();\n\n            //Adds authentication handler\n            services.AddAuthentication()\n                .AddIdentityServerJwt();\n\n            //Register Repositories for Dependency Injection\n            services.AddScoped&lt;ICountryRepository, CountryRepository&gt;();\n\n            services.AddControllersWithViews();\n            services.AddRazorPages();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseMigrationsEndPoint();\n                app.UseWebAssemblyDebugging();\n            }\n            else\n            {\n                app.UseExceptionHandler(&quot;/Error&quot;);\n                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n                app.UseHsts();\n            }\n\n            app.UseHttpsRedirection();\n            app.UseBlazorFrameworkFiles();\n            app.UseStaticFiles();\n\n            app.UseRouting();\n\n            app.UseIdentityServer();\n            app.UseAuthentication();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =&gt;\n            {\n                endpoints.MapRazorPages();\n                endpoints.MapControllers();\n                endpoints.MapFallbackToFile(&quot;index.html&quot;);\n            });\n        }\n    }\n</code></pre>\n<p>Here is the Program.cs of the Client project</p>\n<pre><code>    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add&lt;App&gt;(&quot;#app&quot;);\n\n            builder.Services.AddHttpClient(&quot;####.ServerAPI&quot;, client =&gt; client.BaseAddress = new Uri(builder.HostEnvironment.BaseAddress))\n                .AddHttpMessageHandler&lt;BaseAddressAuthorizationMessageHandler&gt;();\n\n            // Supply HttpClient instances that include access tokens when making requests to the server project\n            builder.Services.AddScoped(sp =&gt; sp.GetRequiredService&lt;IHttpClientFactory&gt;().CreateClient(&quot;####.ServerAPI&quot;));\n\n            builder.Services.AddApiAuthorization();\n            \n            var baseAddress = new Uri(&quot;https://localhost:44395/api/&quot;);\n\n            void RegisterTypedClient&lt;TClient, TImplementation&gt;(Uri apiBaseUrl)\n                where TClient : class where TImplementation : class, TClient\n            {\n                builder.Services.AddHttpClient&lt;TClient, TImplementation&gt;(client =&gt;\n                {\n                    client.BaseAddress = apiBaseUrl;\n                });\n            }\n\n            RegisterTypedClient&lt;ICountryService, CountryService&gt;(baseAddress);\n\n\n            await builder.Build().RunAsync();\n        }\n    }\n</code></pre>\n<p>What am I missing?</p>\n"
}