{
    "tags": [
        "c#",
        "elasticsearch",
        "blazor",
        "serilog",
        "webassembly"
    ],
    "owner": {
        "reputation": 269,
        "user_id": 13705843,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/75dee0c4aea2cb4dde0631495f0290a1?s=128&d=identicon&r=PG&f=1",
        "display_name": "azzurro123",
        "link": "https://stackoverflow.com/users/13705843/azzurro123"
    },
    "is_answered": false,
    "view_count": 425,
    "answer_count": 0,
    "score": 0,
    "last_activity_date": 1597402495,
    "creation_date": 1597392694,
    "last_edit_date": 1597402495,
    "question_id": 63408984,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/63408984/configure-serilog-elasticsearch-in-blazor-webassembly",
    "title": "Configure Serilog Elasticsearch in Blazor WebAssembly",
    "body": "<p>I'm currently working on a <strong>.NET Standard 2.1 Blazor WebAssembly hosted</strong> application. I use <strong>Serilog with ElasticSearch</strong> and want to send log messages from my Client project to the ElasticSearch server. My project structure looks like this:</p>\n<ul>\n<li>BlazorApp.Client (I want to send logs to ElasticSearch from here)</li>\n<li>BlazorApp.Server</li>\n</ul>\n<p>A similar question is asked here: <a href=\"https://stackoverflow.com/questions/63390727/serilog-not-logging-to-elasticsearch-in-blazor-webassembly?noredirect=1#comment112104570_63390727\">Serilog Not Logging to ElasticSearch in Blazor WebAssembly</a></p>\n<p>I figured out how to send Logs using Serilogs .WriteTo.ElasticSearch() but I always run into an error on my browser console: <code>Cannot Wait on monitors</code></p>\n<p><strong>Elasticsearch.Net.UnexpectedElasticsearchClientException: Cannot wait on monitors on this runtime. ---&gt; System.Threading.SynchronizationLockException: Cannot wait on monitors on this runtime.</strong></p>\n<p><strong>Reproduce:</strong></p>\n<p>I currently run ElasticStack on my localhost (ports :9200, :5601). First I needed to activate CORS on my ElasticSearch server, because the Blazor WASm application is a static web application. Thus I added the following code to my <code>elasticsearch.yml</code>:</p>\n<pre><code>http.cors.enabled : true\nhttp.cors.allow-origin : &quot;*&quot;\nhttp.cors.allow-methods : OPTIONS, HEAD, GET, POST, PUT, DELETE\nhttp.cors.allow-headers : X-Requested-With,X-Auth-Token,Content-Type, Content-Length\n</code></pre>\n<p>Futher on, after doing some research on the the resulting errors in my browser console, I assumed that Serilogs NuGet Package <code>Serilog.Sinks.Elasticsearch</code> might not be production ready yet.</p>\n<p>The reason is, that <code>.WriteTo.Elasticsearch()</code> is using an <code>HttpClientHandler</code> which is only partially supported in current Blazor WASm - <em>as far as I know</em>.</p>\n<p>Thus I had to write my own HttpClientHandler implementation for Blazor WASm:</p>\n<pre><code>public class WasmHttpClientHandler : HttpClientHandler\n{\n    public override bool SupportsAutomaticDecompression =&gt; false;\n\n    public override bool SupportsProxy =&gt; false;\n\n    public override bool SupportsRedirectConfiguration =&gt; false;\n}\n</code></pre>\n<p>The next step was to override the <code>HttpConnection</code> class of the Serilog NuGet package:</p>\n<pre><code>public class WasmHttpConnection : HttpConnection\n{\n    protected override HttpMessageHandler CreateHttpClientHandler(RequestData requestData)\n    {\n        var handler = new WasmHttpClientHandler();\n\n        Func&lt;object, X509Certificate, X509Chain, SslPolicyErrors, bool&gt; callback = requestData.ConnectionSettings?.ServerCertificateValidationCallback;\n\n        if (callback != null &amp;&amp; handler.ServerCertificateCustomValidationCallback == null)\n        {\n            handler.ServerCertificateCustomValidationCallback = callback;\n        }\n\n        if (requestData.ClientCertificates != null)\n        {\n            handler.ClientCertificateOptions = ClientCertificateOption.Manual;\n            handler.ClientCertificates.AddRange(requestData.ClientCertificates);\n        }\n\n        return handler;\n    }\n}\n</code></pre>\n<p>Then I needed to use this new connection:</p>\n<pre><code>return new ElasticsearchSinkOptions(new Uri(&quot;http://localhost:9200&quot;))\n           {\n               IndexFormat = &quot;test-index&quot;, \n               Connection = new WasmHttpConnection(),\n           };\n</code></pre>\n<p>Main Method:</p>\n<pre><code>Log.Logger = new LoggerConfiguration()\n             .Enrich.FromLogContext()\n             .Enrich.WithMachineName()\n             .Enrich.WithExceptionDetails()\n             .WriteTo.Debug()\n             .WriteTo.Console(new CompactJsonFormatter())\n             .WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri(&quot;http://localhost:9200&quot;))\n           {\n               IndexFormat = &quot;test-index&quot;, \n               Connection = new WasmHttpConnection(),\n           })\n             .CreateLogger();\n\nSelfLog.Enable(msg =&gt; Debug.WriteLine(msg));\n</code></pre>\n<p>With this setting, I can send my logs to my ElasticSearch and see the log messages in Kibana.</p>\n<p>There is only one problem left, when I turn on Selflog on Serilog:</p>\n<pre><code>SelfLog.Enable(msg =&gt; Debug.WriteLine(msg));\n</code></pre>\n<p>I get the following error: <code>Cannot wait on monitors.</code> Which is also discussed here: <a href=\"https://stackoverflow.com/questions/63397536/blazor-webassembly-monitor-threading-exception\">Blazor WebAssembly Monitor Threading exception</a></p>\n<p>This means, the Serilog .WriteTo.Elasticsearch() might not be production ready for Blazor WASm. Or perhaps you have an idea on how to improve my solution?</p>\n<p>Please let me know if you have any better idea, a suggest on how to improve this solution or even a better working solution!</p>\n"
}