{
    "tags": [
        "authentication",
        "blazor-webassembly",
        "blazor-client-side"
    ],
    "owner": {
        "reputation": 1,
        "user_id": 15558454,
        "user_type": "registered",
        "profile_image": "https://lh4.googleusercontent.com/-pLyyuDxLUYs/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclt28VS9gQacZrACGV2zNZg6hZB0g/s96-c/photo.jpg?sz=128",
        "display_name": "Amauri Rodrigues",
        "link": "https://stackoverflow.com/users/15558454/amauri-rodrigues"
    },
    "is_answered": false,
    "view_count": 18,
    "answer_count": 0,
    "score": 0,
    "last_activity_date": 1617637006,
    "creation_date": 1617637006,
    "question_id": 66955557,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/66955557/authenticate-blazor-webassembly-using-multiple-identity-providers",
    "title": "Authenticate Blazor WebAssembly using multiple identity providers",
    "body": "<p>I am learning Blazor WebAssembly and building a small project to be hosted as Static Web App in Azure.</p>\n<p>The target framework is net5.0.</p>\n<p>When the user clicks over 'login' hyperlink or button, a new page will display the names of some identity providers (Microsoft, Google, SackOverflow, etc.). Then the user will select one to log in.</p>\n<p>I did it using just one identity provider (just Microsoft, just Google, etc.).</p>\n<p>How can I use multiple identity providers in the same app ?</p>\n<p>Someone can help me, please ?</p>\n<p>Blazor WebAssembly App</p>\n<p>TargetFramework: net5.0</p>\n<p>Hosted as Static Web App in Azure</p>\n<p><strong>Program.cs</strong></p>\n<pre><code>using Blazored.LocalStorage;\n\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\n\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nnamespace FileProcApp\n{\n    public class Program\n    {\n        public static async Task Main(string[] args) {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add&lt;App&gt;(&quot;#app&quot;);\n\n            builder.Services.AddScoped(sp =&gt; new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n\n            builder.Services.AddOidcAuthentication(options =&gt; {\n                options.ProviderOptions.DefaultScopes.Clear();\n                options.ProviderOptions.DefaultScopes.Add(&quot;openid&quot;);\n                options.ProviderOptions.DefaultScopes.Add(&quot;offline_access&quot;);\n                builder.Configuration.Bind(&quot;AzureAd&quot;, options.ProviderOptions);\n            });\n            \n            builder.Services.AddOidcAuthentication(options =&gt; {\n                options.ProviderOptions.DefaultScopes.Clear();               \n                builder.Configuration.Bind(&quot;Google&quot;, options.ProviderOptions);\n            });\n\n\n            builder.Services.AddBlazoredLocalStorage();\n\n            builder.Services.AddSingleton&lt;Services.Authentication&gt;();\n\n            await builder.Build().RunAsync();\n        }\n    }\n}\n</code></pre>\n<p><strong>appsettings.json</strong></p>\n<pre><code>{\n  &quot;Google&quot;: {\n    &quot;Authority&quot;: &quot;https://accounts.google.com/&quot;,\n    &quot;ClientId&quot;: &quot;1234567890123-45678901234567890123456789012345.apps.googleusercontent.com&quot;,\n    &quot;PostLogoutRedirectUri&quot;: &quot;https://lorem-ipsun-dolor-sit-amet.azurestaticapps.net/authentication/logout-callback&quot;,\n    &quot;RedirectUri&quot;: &quot;https://lorem-ipsun-dolor-sit-amet.azurestaticapps.net/authentication/login-callback&quot;,\n    &quot;ResponseType&quot;: &quot;token id_token&quot;\n  },\n  &quot;AzureAd&quot;: {\n    &quot;Authority&quot;: &quot;https://login.microsoftonline.com/common&quot;,\n    &quot;ClientId&quot;: &quot;12345678-9012-3456-7890-123456789012&quot;,\n    &quot;ValidateAuthority&quot;: true\n  }\n}\n</code></pre>\n<p><strong>LoginDisplay.razor</strong></p>\n<pre><code>@using Microsoft.AspNetCore.Components.Authorization\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n\n@using Microsoft.Extensions.Logging\n@using System.Text.Json\n\n@inject NavigationManager Navigation\n@inject SignOutSessionStateManager SignOutManager\n\n@inject Services.Authentication UserAuthentication\n\n@inject Blazored.LocalStorage.ILocalStorageService localStorage\n\n&lt;AuthorizeView&gt;\n    &lt;Authorized&gt;\n        Hello, @context.User.Identity.Name!\n\n        &lt;img src=&quot;img/UsrTeste.jpg&quot; style=&quot;width:28px; cursor:pointer; &quot; /&gt;\n        &lt;span style=&quot;cursor:pointer; &quot;&gt;usuario.teste@teste.com.br&lt;/span&gt;\n\n        &lt;div&gt;\n            @System.Text.Json.JsonSerializer.Serialize(context.User.Identity, new JsonSerializerOptions() { WriteIndented = true });\n            @RegistraAutenticacao();\n        &lt;/div&gt;\n        &lt;button class=&quot;nav-link btn btn-link&quot; @onclick=&quot;BeginSignOut&quot;&gt;Log out&lt;/button&gt;\n    &lt;/Authorized&gt;\n    &lt;NotAuthorized&gt;\n        &lt;a class=&quot;sign-in&quot; href=&quot;authentication/register&quot;&gt;Register&lt;/a&gt;\n        &lt;a href=&quot;authentication/login&quot;&gt;Log in&lt;/a&gt;\n    &lt;/NotAuthorized&gt;\n    &lt;Authorizing&gt;\n        &lt;span&gt;Autorizando&lt;/span&gt;\n    &lt;/Authorizing&gt;\n&lt;/AuthorizeView&gt;\n\n\n@code{\n    private async Task BeginSignOut(MouseEventArgs args)\n    {\n        await SignOutManager.SetSignOutState();\n        Navigation.NavigateTo(&quot;authentication/logout&quot;);\n    }\n    private async Task RegistraAutenticacao() {\n        await UserAuthentication.RegistraAutenticacao();\n    }\n}\n</code></pre>\n"
}