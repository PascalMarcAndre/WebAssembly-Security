{
    "tags": [
        "identityserver4"
    ],
    "owner": {
        "reputation": 289,
        "user_id": 14201840,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/4e05d4fd94801927852066255854d2c6?s=128&d=identicon&r=PG&f=1",
        "display_name": "TheNoobProgrammer",
        "link": "https://stackoverflow.com/users/14201840/thenoobprogrammer"
    },
    "is_answered": false,
    "view_count": 38,
    "answer_count": 1,
    "score": 1,
    "last_activity_date": 1615549804,
    "creation_date": 1615361579,
    "last_edit_date": 1615549804,
    "question_id": 66560210,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/66560210/identityserver4-google-sign-in-only-show-openid-scope-and-didnt-show-the-email",
    "title": "IdentityServer4: Google sign-in only show OpenID scope and didn&#39;t show the email and profile scope information",
    "body": "<p>When i'm trying to sign-in with google sign-in from blazor webassembly, the requested claims and the claims returned from identity server is not matching (see output)\n<strong>BackEnd/Config.cs</strong></p>\n<pre><code>namespace BackEnd\n{\n    public static class ServerConfiguration\n    {\n        public static IEnumerable&lt;IdentityResource&gt; IdentityResources =&gt;\n            new IdentityResource[]\n            {\n                new IdentityResources.OpenId(),\n                new IdentityResources.Profile(),\n                new IdentityResources.Email(),\n                new IdentityResource(&quot;roles&quot;, &quot;User roles&quot;, new List&lt;string&gt; { &quot;role&quot; })\n            };\n        public static IEnumerable&lt;ApiScope&gt; ApiScopes =&gt;\n            new ApiScope[]\n            {\n                new ApiScope(&quot;protectedScope&quot;, &quot;Protected Scope&quot;)\n            };\n        public static IEnumerable&lt;Client&gt; Clients =&gt;\n            new Client[]\n            {\n                new Client()\n                {\n                    ClientId = &lt;confidential&gt;,\n                    ClientName = &quot;client 1&quot;,\n                    RequireClientSecret = false,\n                    RequirePkce = true,\n                    AllowedCorsOrigins = { &quot;https://localhost:5001&quot; },\n                    AllowedGrantTypes = GrantTypes.Code,\n                    RedirectUris = { &quot;https://localhost:5001/authentication/login-callback&quot; },\n                    PostLogoutRedirectUris = { &quot;https://localhost:5001/&quot; },\n                    AllowOfflineAccess = true,\n                    AllowedScopes = new List&lt;string&gt;{\n                        IdentityServerConstants.StandardScopes.OpenId,\n                        IdentityServerConstants.StandardScopes.Profile,\n                        IdentityServerConstants.StandardScopes.Email,\n                        &quot;protectedScope&quot;\n                    }\n                },\n                new Client()\n                {\n                    ClientId = &quot;blazor&quot;,\n                    ClientName = &quot;oidcUser&quot;,\n                    RequireClientSecret = false,\n                    RequirePkce = true,\n                    RequireConsent = true,\n                    AllowedCorsOrigins = { &quot;https://localhost:5001&quot; },\n                    AllowedGrantTypes = GrantTypes.Code,\n                    RedirectUris = { &quot;https://localhost:5001/authentication/login-callback&quot; },\n                    PostLogoutRedirectUris = { &quot;https://localhost:5001/&quot; },\n                    AllowOfflineAccess = true,\n                    AlwaysIncludeUserClaimsInIdToken = true,\n                    AllowedScopes = new List&lt;string&gt;{\n                        &quot;openid&quot;,\n                        &quot;email&quot;,\n                        &quot;profile&quot;,\n                        &quot;protectedScope&quot;\n                    }\n                }\n            };\n        public static List&lt;TestUser&gt; TestUsers { \n            get\n            {\n                TestUser user1 = new TestUser()\n                {\n                    SubjectId = &quot;2f47f8f0-bea1-4f0e-ade1-88533a0eaf57&quot;,\n                    Username = &quot;John&quot;,\n                    Claims = new List&lt;Claim&gt;()\n                    {\n                        new Claim(&quot;role&quot;, &quot;SignedInUser&quot;),\n                        new Claim(&quot;email&quot;, &quot;johnsmith@gmail.com&quot;),\n                        new Claim(&quot;picture&quot;, &quot;https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fwww.business2community.com%2Fsocial-media%2Fimportance-profile-picture-career-01899604&amp;psig=AOvVaw2LC5T-WZMYnHD9I7PeK7lT&amp;ust=1615219065948000&amp;source=images&amp;cd=vfe&amp;ved=2ahUKEwip1caGxp7vAhV1NbcAHd_2BFwQjRx6BAgAEAc&quot;)\n                    }\n                };\n                List&lt;TestUser&gt; testUsers = new List&lt;TestUser&gt;();\n                testUsers.Add(user1);\n\n                return testUsers;\n            }\n        }\n    }\n}\n</code></pre>\n<p><strong>BackEnd/Startup.cs</strong></p>\n<pre><code>namespace BackEnd\n{\n    public class Startup\n    {\n        public IWebHostEnvironment Environment { get; }\n        public IConfiguration Configuration { get; }\n        private string _clientId = null;\n        private string _clientSecret = null;\n\n        public Startup(IWebHostEnvironment environment, IConfiguration configuration)\n        {\n            Environment = environment;\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n\n            var cert = new X509Certificate2(Path.Combine(&quot;.&quot;, &quot;IdsvCertificate.pfx&quot;), &quot;YouShallNotPass123&quot;);\n\n            _clientId = Configuration[&quot;OAuth:ClientId&quot;];\n            _clientSecret = Configuration[&quot;OAuth:ClientSecret&quot;];\n\n            services.AddControllersWithViews();\n\n            services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n                options.UseSqlite(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));\n\n            services.AddDefaultIdentity&lt;ApplicationUser&gt;(options =&gt; options.SignIn.RequireConfirmedAccount = false)\n                .AddRoles&lt;IdentityRole&gt;()\n                .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()\n                .AddDefaultTokenProviders();\n\n            services.AddTransient&lt;IProfileService, ProfileService&gt;();\n\n            var builder = services.AddIdentityServer(options =&gt;\n            {\n                options.Events.RaiseErrorEvents = true;\n                options.Events.RaiseInformationEvents = true;\n                options.Events.RaiseFailureEvents = true;\n                options.Events.RaiseSuccessEvents = true;\n\n                // see https://identityserver4.readthedocs.io/en/latest/topics/resources.html\n                options.EmitStaticAudienceClaim = true;\n                options.UserInteraction = new UserInteractionOptions() { LoginUrl = &quot;/Account/Login&quot;, LogoutUrl = &quot;/Account/Logout&quot; };\n            })\n                .AddInMemoryIdentityResources(Config.IdentityResources)\n                .AddInMemoryApiScopes(Config.ApiScopes)\n                .AddInMemoryClients(Config.Clients)\n                .AddProfileService&lt;ProfileService&gt;()\n                .AddAspNetIdentity&lt;ApplicationUser&gt;();\n\n            builder.AddSigningCredential(cert);\n            // builder.AddDeveloperSigningCredential();\n            JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear();\n\n            services.AddAuthentication()\n                .AddGoogle(&quot;Google&quot;, options =&gt;\n                {\n                    options.SignInScheme = IdentityServerConstants.ExternalCookieAuthenticationScheme;\n\n                    options.ClientId = _clientId;\n                    options.ClientSecret = _clientSecret;\n                    options.ClaimActions.MapJsonKey(&quot;picture&quot;, &quot;picture&quot;, &quot;url&quot;);\n                    options.SaveTokens = true;\n                })\n                .AddOpenIdConnect(&quot;oidc&quot;, options =&gt;\n                {\n                    options.SignInScheme = IdentityServerConstants.ExternalCookieAuthenticationScheme;\n\n                    options.Authority = &quot;https://accounts.google.com&quot;;\n                    options.RequireHttpsMetadata = true;\n                    options.ResponseType = &quot;code&quot;;\n                    options.Scope.Add(&quot;profile&quot;);\n                    options.Scope.Add(&quot;email&quot;);\n                    options.Scope.Add(&quot;openid&quot;);\n\n                    options.ClientId = _clientId;\n                    options.ClientSecret = _clientSecret;\n                    options.SaveTokens = true;\n                    options.GetClaimsFromUserInfoEndpoint = true;\n                    options.ClaimActions.MapJsonKey(&quot;picture&quot;, &quot;picture&quot;, &quot;url&quot;);\n                    options.TokenValidationParameters = new TokenValidationParameters\n                    {\n                        NameClaimType = &quot;name&quot;,\n                        RoleClaimType = &quot;role&quot;,\n                        ValidateIssuer = true\n                    };\n                });\n\n                services.AddAuthorization();\n\n                services.AddGrpc();\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            if (Environment.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseStaticFiles();\n\n            app.UseRouting();\n            app.UseIdentityServer();\n            app.UseAuthentication();\n            app.UseAuthorization();\n            app.UseGrpcWeb(new GrpcWebOptions { DefaultEnabled = true });\n            app.UseEndpoints(endpoints =&gt;\n            {\n                endpoints.MapGrpcService&lt;UserService&gt;();\n                endpoints.MapDefaultControllerRoute().RequireAuthorization();\n            });\n        }\n    }\n}\n</code></pre>\n<p><strong>BackEnd/ProfileService.cs</strong></p>\n<pre><code>public class ProfileService : IProfileService\n{\n    public ProfileService()\n    {\n    }\n\n    public async Task GetProfileDataAsync(ProfileDataRequestContext context)\n    {\n        var roleClaims = context.Subject.FindAll(JwtClaimTypes.Role);\n        context.IssuedClaims.AddRange(roleClaims);\n\n        await Task.CompletedTask;\n    }\n\n    public async Task IsActiveAsync(IsActiveContext context)\n    {\n        await Task.CompletedTask;\n    }\n}\n</code></pre>\n<p><strong>FrontEnd/Program.cs</strong></p>\n<pre><code>namespace FrontEnd\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add&lt;App&gt;(&quot;#app&quot;);\n\n            builder.Services.AddScoped(sp =&gt; new HttpClient()\n                { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n\n            builder.Services.AddScoped(services =&gt; \n            {\n                var httpHandler = new GrpcWebHandler(GrpcWebMode.GrpcWeb, new HttpClientHandler());\n                var channel = GrpcChannel.ForAddress(&quot;https://localhost:5000&quot;, new GrpcChannelOptions\n                    { \n                        HttpHandler = httpHandler\n                    });\n\n                return new Greeter.GreeterClient(channel);\n            });\n\n            builder.Services.AddScoped(services =&gt; \n            {\n                var baseAddressMessageHandler = services.GetRequiredService&lt;BaseAddressAuthorizationMessageHandler&gt;();\n                baseAddressMessageHandler.InnerHandler = new HttpClientHandler();\n                var httpHandler = new GrpcWebHandler(GrpcWebMode.GrpcWeb, new HttpClientHandler());\n                var channel = GrpcChannel.ForAddress(&quot;https://localhost:5000&quot;, new GrpcChannelOptions\n                    { \n                        HttpHandler = httpHandler\n                    });\n\n                return new User.UserClient(channel);\n            });\n            \n            builder.Services.AddOidcAuthentication(options =&gt;\n            {\n                builder.Configuration.Bind(&quot;Authentication:Google&quot;, options.ProviderOptions);\n                options.UserOptions.RoleClaim = &quot;SignedInUser&quot;;\n            }).AddAccountClaimsPrincipalFactory&lt;CustomUserFactory&gt;();\n\n            builder.Services.AddOptions();\n            \n            builder.Services.AddAuthorizationCore();\n\n            await builder.Build().RunAsync();\n\n        }\n    }\n</code></pre>\n<p><strong>FrontEnd/wwwroot/appsettings.json</strong></p>\n<pre><code>{\n    &quot;Authentication&quot;:{\n        &quot;Google&quot;: {\n            &quot;Authority&quot;: &quot;https://localhost:5000&quot;,\n            &quot;ClientId&quot;: &lt;confidential&gt;,\n            &quot;ClientSecret&quot;: &quot;2fxc9srOe8QsRBnhzLIa1pF0&quot;,\n            &quot;DefaultScopes&quot;: [\n                &quot;email&quot;,\n                &quot;profile&quot;,\n                &quot;openid&quot;\n            ],\n            &quot;PostLogoutRedirectUri&quot;: &quot;https://localhost:5001/&quot;,\n            &quot;RedirectUri&quot;: &quot;https://localhost:5001/authentication/login-callback&quot;,\n            &quot;ResponseType&quot;: &quot;code&quot;\n        },\n}\n</code></pre>\n<p>This is the output from IdentityServer when i'm trying to sign-in</p>\n<pre><code>[18:34:28 Debug] IdentityServer4.Validation.TokenValidator\nCalling into custom token validator: IdentityServer4.Validation.DefaultCustomTokenValidator\n\n[18:34:28 Debug] IdentityServer4.Validation.TokenValidator\nToken validation success\n{&quot;ClientId&quot;: null, &quot;ClientName&quot;: null, &quot;ValidateLifetime&quot;: true, &quot;AccessTokenType&quot;: &quot;Jwt&quot;, &quot;ExpectedScope&quot;: &quot;openid&quot;, &quot;TokenHandle&quot;: null, &quot;JwtId&quot;: &quot;8E6167D64F8FEA2FF6D12D17A1CEEBFE&quot;, &quot;Claims&quot;: {&quot;nbf&quot;: 1615548868, &quot;exp&quot;: 1615552468, &quot;iss&quot;: &quot;https://localhost:5000&quot;, &quot;aud&quot;: &quot;https://localhost:5000/resources&quot;, &quot;client_id&quot;: &quot;499675830263-ldcg4fm7kcbjlt48tpaffqdbfnskmi8v.apps.googleusercontent.com&quot;, &quot;sub&quot;: &quot;81c306df-c1f0-4714-964f-2459b670429e&quot;, &quot;auth_time&quot;: 1615548849, &quot;idp&quot;: &quot;oidc&quot;, &quot;jti&quot;: &quot;8E6167D64F8FEA2FF6D12D17A1CEEBFE&quot;, &quot;sid&quot;: &quot;0BF0BA4CA6BD3DE8D158A426A70A91E0&quot;, &quot;iat&quot;: 1615548868, &quot;scope&quot;: [&quot;openid&quot;, &quot;profile&quot;, &quot;email&quot;, &quot;role&quot;], &quot;amr&quot;: &quot;external&quot;}, &quot;$type&quot;: &quot;TokenValidationLog&quot;}\n\n[18:34:28 Debug] IdentityServer4.ResponseHandling.UserInfoResponseGenerator\nCreating userinfo response\n\n[18:34:28 Debug] IdentityServer4.ResponseHandling.UserInfoResponseGenerator\nScopes in access token: openid profile email role\n\n[18:34:28 Debug] IdentityServer4.ResponseHandling.UserInfoResponseGenerator\nRequested claim types: sub name family_name given_name middle_name nickname preferred_username profile picture website gender birthdate zoneinfo locale updated_at email email_verified role\n\n[18:34:28 Information] IdentityServer4.ResponseHandling.UserInfoResponseGenerator\nProfile service returned the following claim types: sub name preferred_username\n\n[18:34:28 Debug] IdentityServer4.Endpoints.UserInfoEndpoint\nEnd userinfo request\n\n[18:34:29 Debug] IdentityServer4.Hosting.EndpointRouter\nRequest path /connect/checksession matched to endpoint type Checksession\n\n[18:34:29 Debug] IdentityServer4.Hosting.EndpointRouter\nEndpoint enabled: Checksession, successfully created handler: IdentityServer4.Endpoints.CheckSessionEndpoint\n\n[18:34:29 Information] IdentityServer4.Hosting.IdentityServerMiddleware\nInvoking IdentityServer endpoint: IdentityServer4.Endpoints.CheckSessionEndpoint for /connect/checksession\n\n[18:34:29 Debug] IdentityServer4.Endpoints.CheckSessionEndpoint\nRendering check session result\n</code></pre>\n<p>From the output, the requested claims and the claims that's returned by the profile service is not matching</p>\n<p><a href=\"https://i.stack.imgur.com/B6Wz0.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/B6Wz0.png\" alt=\"What it looks like in the test page\" /></a>\nFrom the image, there should be a name after the &quot;hello&quot;</p>\n<p>The image is similar except now it shows the name. IdentityServer4 is working fine, it shows everything as i expected</p>\n"
}