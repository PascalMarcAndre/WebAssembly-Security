{
    "tags": [
        "angular",
        "web-audio-api",
        "webassembly",
        "audio-worklet"
    ],
    "owner": {
        "reputation": 15,
        "user_id": 9615664,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/a19aaf906b5f470c9c0aa4671229a579?s=128&d=identicon&r=PG&f=1",
        "display_name": "mwong",
        "link": "https://stackoverflow.com/users/9615664/mwong"
    },
    "is_answered": true,
    "view_count": 119,
    "accepted_answer_id": 65675110,
    "answer_count": 1,
    "score": 0,
    "last_activity_date": 1610402228,
    "creation_date": 1610393286,
    "question_id": 65673325,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65673325/best-way-to-call-wasm-module-functions-in-audioworkletprocessor",
    "title": "Best way to call wasm module functions in AudioWorkletProcessor?",
    "body": "<p>I am using Angular for development of a video conferencing web application. I am trying to call some wasm functions in my <code>AudioWorkletProcessor</code> class. However, I am quite stuck on how to pass the wasm module into the <code>AudioWorkletProcessor</code> and then call those functions. I was able to instantiate the wasm module from the js file generated from emcc (using command: <code>emcc test.cpp -s WASM=1 -s MODULARIZE=1</code>) and then tried passing this module through the <code>options.processorOptions</code> parameter when we construct the <code>AudioWorkletNode</code>; however, it seems like Function objects cannot be passed as it gives a <code>DataCloneError</code>. Is there a better way of instantiating the wasm module and passing it into the worklet processor so that I can use its functions?</p>\n<p>Code of audio.service.ts:</p>\n<pre><code>import { Injectable } from '@angular/core';\nimport { AudioContext, AudioWorkletNode } from 'standardized-audio-context';\nimport * as Module from '../../../assets/worklet/a.out.js'; // a.out.js is file generated by emcc\ndeclare const WebAssembly: any;\n\n@Injectable()\nexport class AudioService {\n  audioCtx = new AudioContext();\n\n  constructor() {}\n\n  async createNewSetting(track) {\n    const srcNode = this.audioCtx.createMediaStreamTrackSource(track);\n    const destNode = this.audioCtx.createMediaStreamDestination();\n\n    await this.audioCtx.resume();\n    await this.audioCtx.audioWorklet.addModule(\n      './assets/worklet/spatial-processor.js'\n    );\n\n    // Instantiate the wasm module and put in path to file\n    const wasm = await Module({ locateFile: function(s) { return 'assets/worklet/' + s; }});\n    \n    // Will throw DataCloneError\n    const spatialNode = new AudioWorkletNode(\n      this.audioCtx,\n      'spatial-processor',\n      { processorOptions: {\n        compiledModule: wasm\n      }}\n    );\n\n    // Connect the nodes\n    srcNode.connect(spatialNode);\n    spatialNode.connect(destNode);\n\n    // Return the updated audio stream\n    return destNode.stream.getTracks()[0];\n\n  }\n}\n    \n</code></pre>\n"
}