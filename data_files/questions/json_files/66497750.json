{
    "tags": [
        "c#",
        "authentication",
        "blazor-server-side",
        "blazor-webassembly"
    ],
    "owner": {
        "reputation": 437,
        "user_id": 12233905,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/2f208e6a8791feecc6bd9a81d2ee8336?s=128&d=identicon&r=PG&f=1",
        "display_name": "StewieG",
        "link": "https://stackoverflow.com/users/12233905/stewieg"
    },
    "is_answered": false,
    "view_count": 67,
    "answer_count": 1,
    "score": 0,
    "last_activity_date": 1615591478,
    "creation_date": 1614968865,
    "question_id": 66497750,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/66497750/net-5-blazor-serverside-and-webassembly-hybrid-with-webapi-authentication",
    "title": ".NET 5 Blazor ServerSide AND WebAssembly (hybrid) with WebAPI Authentication?",
    "body": "<p>Is there a way to use the default Authentication (.NET 5 / Identity-Server) with Blazor ServerSide <strong>and</strong> Blazor WebAssembly in a hybrid manner?\nI want to have a Blazor Project, which can be switched between ClientSide (WebAssembly) and ServerSide, to keep the Client the same, I want to use the WebAPI on ClientSide <strong>and</strong> ServerSide. I started with ServerSide (better debugging and better performance for tables *) and maybe switch to ClientSide later (if the performance will be better).</p>\n<p>*<em>Please do not start discussing about what is better or if YOU maybe have a good performance with WebAssembly, then you don't have many nested components like component based tables.</em></p>\n<p>I did test so many combinations, but can't get it to work, but let's start with the basic:</p>\n<ul>\n<li>Create Blazor WebAssembly Project (ASP.Net Core hosted)</li>\n<li>Use .NET 5 with Authentication (accounts)</li>\n<li>Edit the Server startup.cs (like below)</li>\n<li>Edit the Client program.cs (like below)</li>\n<li>Add the &quot;_Host.cshtml&quot; to &quot;\\Server\\Pages&quot; (like below)</li>\n</ul>\n<p><strong>Startup.cs (Server)</strong></p>\n<pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));\n\n    services.AddDatabaseDeveloperPageExceptionFilter();\n    services.AddDefaultIdentity&lt;ApplicationUser&gt;(options =&gt; options.SignIn.RequireConfirmedAccount = true).AddEntityFrameworkStores&lt;ApplicationDbContext&gt;();\n    services.AddIdentityServer().AddApiAuthorization&lt;ApplicationUser, ApplicationDbContext&gt;();\n    services.AddAuthentication().AddIdentityServerJwt();\n    \n    // SERVER SIDE SUPPORT\n    services.AddServerSideBlazor();\n    services.AddApiAuthorization();\n    if (!services.Any(x =&gt; x.ServiceType == typeof(HttpClient)))\n    {\n        services.AddScoped(s =&gt;\n        {\n            var uriHelper = s.GetRequiredService&lt;NavigationManager&gt;();\n            return new HttpClient\n            {\n                BaseAddress = new System.Uri(uriHelper.BaseUri)\n            };\n        });\n    }\n    // --\n\n    services.AddControllersWithViews();\n    services.AddRazorPages();\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n        app.UseMigrationsEndPoint();\n        app.UseWebAssemblyDebugging();\n    }\n    else\n    {\n        app.UseExceptionHandler(&quot;/Error&quot;);\n        app.UseHsts();\n    }\n\n    app.UseHttpsRedirection();\n    app.UseBlazorFrameworkFiles();\n    app.UseStaticFiles();\n\n    app.UseRouting();\n\n    app.UseIdentityServer();\n    app.UseAuthentication();\n    app.UseAuthorization();\n\n    app.UseEndpoints(endpoints =&gt;\n    {\n        endpoints.MapRazorPages();\n        endpoints.MapControllers();\n        \n        // SERVER-SIDE SUPPORT\n        endpoints.MapBlazorHub();\n        endpoints.MapFallbackToPage(&quot;/_Host&quot;); //endpoints.MapFallbackToFile(&quot;index.html&quot;);\n        // --\n    });\n}\n</code></pre>\n<p><strong>Program.cs (Client)</strong></p>\n<pre><code>public static async Task Main(string[] args)\n{\n    var builder = WebAssemblyHostBuilder.CreateDefault(args);\n    //builder.RootComponents.Add&lt;App&gt;(&quot;#app&quot;);\n\n    builder.Services.AddHttpClient(&quot;BlazorSwitchWithSec2.ServerAPI&quot;, client =&gt; client.BaseAddress = new Uri(builder.HostEnvironment.BaseAddress))\n        .AddHttpMessageHandler&lt;BaseAddressAuthorizationMessageHandler&gt;();\n\n    // Supply HttpClient instances that include access tokens when making requests to the server project\n    builder.Services.AddScoped(sp =&gt; sp.GetRequiredService&lt;IHttpClientFactory&gt;().CreateClient(&quot;BlazorSwitchWithSec2.ServerAPI&quot;));\n\n    builder.Services.AddApiAuthorization();\n\n    await builder.Build().RunAsync();\n}\n</code></pre>\n<p><strong>_Host.cshtml (Server)</strong></p>\n<pre><code>@page &quot;/&quot;\n@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n        @if (Request.QueryString.Value.ToLower().Contains(&quot;mode=client&quot;))\n        {\n            &lt;title&gt;WebApp (CE)&lt;/title&gt;\n        }\n        else\n        {\n            &lt;title&gt;WebApp (SE)&lt;/title&gt;\n        }\n        &lt;base href=&quot;~/&quot; /&gt;\n        &lt;link href=&quot;css/bootstrap/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; /&gt;\n        &lt;link href=&quot;css/app.css&quot; rel=&quot;stylesheet&quot; /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        @if (Request.QueryString.Value.ToLower().Contains(&quot;mode=client&quot;))\n        {\n            &lt;component type=&quot;typeof(BlazorSwitchWithSec2.Client.App)&quot; render-mode=&quot;WebAssemblyPrerendered&quot; /&gt;\n            &lt;script src=&quot;_content/Microsoft.AspNetCore.Components.WebAssembly.Authentication/AuthenticationService.js&quot;&gt;&lt;/script&gt;\n            &lt;script src=&quot;_framework/blazor.webassembly.js&quot;&gt;&lt;/script&gt;\n            &lt;script&gt;navigator.serviceWorker.register('service-worker.js');&lt;/script&gt;\n        }\n        else\n        {\n            &lt;component type=&quot;typeof(BlazorSwitchWithSec2.Client.App)&quot; render-mode=&quot;Server&quot; /&gt;\n            &lt;script src=&quot;_content/Microsoft.AspNetCore.Components.WebAssembly.Authentication/AuthenticationService.js&quot;&gt;&lt;/script&gt;\n            &lt;script src=&quot;_framework/blazor.server.js&quot;&gt;&lt;/script&gt;\n        }\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>If I try to register or login via WebAssembly or Server, I get this error:\n<code>Unable to cast object of type 'Microsoft.AspNetCore.Components.Server.ServerAuthenticationStateProvider' to type 'Microsoft.AspNetCore.Components.WebAssembly.Authentication.IRemoteAuthenticationService`1[Microsoft.AspNetCore.Components.WebAssembly.Authentication.RemoteAuthenticationState]'</code></p>\n<p>Maybe also this helps: I tried something different like using the services from the client, one combination seemed to work with controllers without [Authorize] attribute, but with it, I got a error like <code>Unable to parse ...</code> - the result was a login url (this is why the parsing didn't work). I can't post the code, because I tested too much and the project isn't working anymore.</p>\n<p>Without any Authentication everything works and I could send a token to the WebAPI to create my own login system. But I want to try the default one.</p>\n"
}