{
    "tags": [
        "amazon-cognito",
        "asp.net-core-3.1",
        "blazor-client-side",
        "blazor-webassembly"
    ],
    "owner": {
        "reputation": 108,
        "user_id": 11080892,
        "user_type": "registered",
        "profile_image": "https://lh4.googleusercontent.com/--FtsbDs1DdA/AAAAAAAAAAI/AAAAAAAAABc/kpnXGBoIXwk/photo.jpg?sz=128",
        "display_name": "Jeff Bacon",
        "link": "https://stackoverflow.com/users/11080892/jeff-bacon"
    },
    "is_answered": true,
    "view_count": 440,
    "accepted_answer_id": 62936751,
    "answer_count": 2,
    "score": 2,
    "last_activity_date": 1595954951,
    "creation_date": 1594777086,
    "question_id": 62906320,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/62906320/how-do-i-pass-openid-authentication-from-blazor-webassembly-to-a-net-core-webap",
    "title": "How do I pass OpenID authentication from Blazor WebAssembly to a .NET Core WebApi backend, both using Cognito as the OpenID provider?",
    "body": "<p><strong>Technology Goal:</strong></p>\n<ul>\n<li>Client-Side: Blazor WebAssembly</li>\n<li>Backend: .NET Core 3.1 WebApi on Lambda (AWS) via ApiGateway (/{proxy+})</li>\n<li>Authentication: AWS Cognito</li>\n</ul>\n<p><strong>Backend:</strong></p>\n<ul>\n<li>I have a .NET Core Lambda function that is accessed via AWS ApiGateway (RestApi) by having the ApiGateway /{proxy+} =&gt; Lambda. This deploys and works fine. I have configured the WebApi to use AWS Cognito as it's authentication method (code from Startup..cs:ConfigureServices below).</li>\n<li>I can successfully use the [Authorize] attribute on my routes and when I access an route with [Authorize] in my browser directly, I get sent to the Cognito signing page, I can login and I'm sent back to my Api and the call executes. Works great.</li>\n</ul>\n<p><strong>Startup.cs:ConfigureServices</strong></p>\n<pre><code>RegionEndpoint region = Configuration.GetAWSOptions().Region;\nstring CognitoMetadataAddress = $&quot;https://cognito-idp.{region.SystemName}.amazonaws.com/{AppConfig.CognitoPoolId}/.well-known/openid-configuration&quot;;\n\n//\n// Ref: https://criticalhittech.com/2019/02/19/asp-net-core-with-aws-lambda-and-cognito/\n//\nservices.Configure&lt;OpenIdConnectOptions&gt;(options =&gt;\n{\n    options.AuthenticationMethod = OpenIdConnectRedirectBehavior.RedirectGet;\n    options.ClientId             = AppConfig.CognitoClientId;\n    options.MetadataAddress      = CognitoMetadataAddress;\n    options.ResponseType         = OpenIdConnectResponseType.Code;\n    options.SaveTokens           = true;\n    options.TokenValidationParameters = new TokenValidationParameters()\n    {\n        ValidateIssuer = true\n    };\n});\nservices.AddAuthentication(options =&gt;\n{\n    options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n    options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n    options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;\n})\n.AddCookie()\n.AddOpenIdConnect(OpenIdConnectDefaults.AuthenticationScheme, options =&gt;\n{\n    options.ClientId        = AppConfig.CognitoClientId;\n    options.MetadataAddress = CognitoMetadataAddress;\n    options.ResponseType    = OpenIdConnectResponseType.Code;\n    options.SaveTokens      = true;\n    options.TokenValidationParameters = new TokenValidationParameters()\n    {\n        ValidateIssuer = true\n    };\n    options.Events = new OpenIdConnectEvents()\n    {\n        OnRedirectToIdentityProvider = OnRedirectToIdentityProvider,\n        OnRedirectToIdentityProviderForSignOut = OnRedirectToIdentityProviderForSignOut,\n        OnAuthenticationFailed = OnAuthenticationFailed,\n        OnUserInformationReceived = OnUserInformationReceived\n    };\n});\n</code></pre>\n<p>Client-Side:</p>\n<ul>\n<li>I have a basic Blazor project going using WebAssembly (so I can eventually just throw the compiled static output up on AWS S3 and have it hosted there).</li>\n<li>I have configured the project to use Cognito as it's authentication source (see Program.cs:Main code below) and it works &quot;ok&quot; (it has the <a href=\"https://stackoverflow.com/questions/61845477/blazor-webassembly-amazon-cognito\">dumb Cognito X-Frame-Options issue</a> of course, but it works).</li>\n</ul>\n<p>Program.cs:Main</p>\n<pre><code>string CognitoPoolId = &quot;ca-central-1_&lt;REMOVED&gt;&quot;;\nstring region = CognitoPoolId.Substring(0, CognitoPoolId.IndexOf('_', StringComparison.InvariantCultureIgnoreCase));\nstring CognitoAuthority = $&quot;https://cognito-idp.{region}.amazonaws.com/{CognitoPoolId}&quot;;\nstring CognitoMetadataAddress = $&quot;https://cognito-idp.{region}.amazonaws.com/{CognitoPoolId}/.well-known/openid-configuration&quot;;\n\nbuilder.Services.AddOidcAuthentication(options =&gt;\n{\n    options.ProviderOptions.Authority = CognitoAuthority;\n    options.ProviderOptions.MetadataUrl = CognitoMetadataAddress;\n    options.ProviderOptions.ClientId = &quot;&lt;REMOVED&gt;&quot;;\n    options.ProviderOptions.RedirectUri = $&quot;{builder.HostEnvironment.BaseAddress.TrimEnd('/')}/authentication/login-callback&quot;;\n    options.ProviderOptions.ResponseType = &quot;code&quot;;\n\n});\n\nbuilder.Services.AddOptions();\nbuilder.Services.AddAuthorizationCore();\n</code></pre>\n<p><strong>Problem</strong>\nIn my Blazor app, I want to call my back-end API (which requires Authentication) and use the authorization that the Blazor app already has since both the client and backend are using the same Cognito user pool.\ni.e.</p>\n<ol>\n<li>Load up Blazor app</li>\n<li>Complete Login</li>\n<li>Make Http call to my Backend &lt;-- use the login session from #2</li>\n</ol>\n<pre><code>            HttpResponseMessage response = await Http.SendAsync(requestMessage);\n</code></pre>\n<p>How do I configure the HttpClient instance to send along the authorization the Blazor app has via authenticating with Cognito so that it can call the protected Apis?</p>\n"
}