{
    "tags": [
        "javascript",
        "asp.net-core",
        "blazor",
        "blazor-client-side",
        "blazor-jsinterop"
    ],
    "owner": {
        "reputation": 2603,
        "user_id": 638311,
        "user_type": "registered",
        "accept_rate": 89,
        "profile_image": "https://i.stack.imgur.com/zD4Ta.jpg?s=128&g=1",
        "display_name": "INNVTV",
        "link": "https://stackoverflow.com/users/638311/innvtv"
    },
    "is_answered": true,
    "view_count": 584,
    "accepted_answer_id": 61685804,
    "answer_count": 1,
    "score": 0,
    "last_activity_date": 1589035280,
    "creation_date": 1588954425,
    "last_edit_date": 1589035280,
    "question_id": 61683382,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/61683382/jsruntime-in-blazor-webassembly-blocking-dom-updates-on-first-load",
    "title": "JSRuntime in Blazor WebAssembly blocking DOM updates on first load",
    "body": "<p>I'm using the latest <a href=\"https://devblogs.microsoft.com/aspnet/blazor-webassembly-3-2-0-release-candidate-now-available/\" rel=\"nofollow noreferrer\">Blazor WebAssembly 3.2.0 Release Candidate</a></p>\n\n<p>From a vanilla Blazor WASM template I made the following adjustments to test/debug the issue:</p>\n\n<p>In <strong>Program.cs</strong> I add the following singleton that will be injected into all pages:</p>\n\n<pre><code>builder.Services.AddSingleton&lt;ApplicationState&gt;();\n</code></pre>\n\n<p>The class looks like:</p>\n\n<pre><code>public class ApplicationState\n{\n    public bool BoolValue { get; set; }\n    public string StringValue { get; set; }\n\n    public ApplicationState()\n    {\n        BoolValue = false;\n        StringValue = \"Default value\";\n    }\n\n}\n</code></pre>\n\n<p>and is injected in <strong>_Imports.razor</strong> along with JSRuntime so they are available to all pages:</p>\n\n<pre><code>@inject IJSRuntime JSRuntime\n@inject BlazorApp1.State.ApplicationState AppState;\n</code></pre>\n\n<p>In order to test that the ApplicationState object is passing through the application properly I have it used in the following 2 locations:</p>\n\n<p>In <strong>NavManu.razor</strong> I wrap one of the menu items around <strong>BoolValue</strong> to show/hide that item:</p>\n\n<pre><code>@if (AppState.BoolValue)\n{\n    &lt;li class=\"nav-item px-3\"&gt;\n        &lt;NavLink class=\"nav-link\" href=\"counter\"&gt;\n            &lt;span class=\"oi oi-plus\" aria-hidden=\"true\"&gt;&lt;/span&gt; Counter\n        &lt;/NavLink&gt;\n    &lt;/li&gt;\n}\n</code></pre>\n\n<p>And in <strong>Index.razor</strong> I added an H2 tag under the default Hello World header to display the <strong>StringValue</strong></p>\n\n<pre><code>&lt;h1&gt;Hello, world!&lt;/h1&gt;\n&lt;h2&gt;@AppState.StringValue&lt;/h2&gt;\n</code></pre>\n\n<p>I also have a javascript file located in <strong>wwwroot/js/extenstions.js</strong> it has a single function used to get cookie data:</p>\n\n<pre><code>function getCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i = 0; i &lt; ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') c = c.substring(1, c.length);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n    }\n    return null;\n};\n</code></pre>\n\n<p>And is included as a script in the <strong>wwwroot/index.html</strong> right below the <strong>_framework/blazor.webassembly.js</strong> script:</p>\n\n<pre><code>&lt;script src=\"_framework/blazor.webassembly.js\"&gt;&lt;/script&gt;\n&lt;script src=\"js/extensions.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>In <strong>App.razor</strong> I have the following <strong>@code</strong> block:</p>\n\n<pre><code>@code\n{\n    protected override async Task OnInitializedAsync()\n    {\n        AppState.BoolValue = true;\n        AppState.StringValue = \"Testing 123...\";\n    }\n}\n</code></pre>\n\n<p>Everything works as expected and the menu item is visible as well as the string value in the H2 tag.</p>\n\n<p>However if I add a call to my Javasript function via JSRuntime like so:</p>\n\n<pre><code>@code\n{\n    protected override async Task OnInitializedAsync()\n    {\n        var jwtToken = await JSRuntime.InvokeAsync&lt;string&gt;(\"getCookie\", \"cookieName\");\n\n        AppState.BoolValue = true;\n        AppState.StringValue = \"Testing 123...\";\n    }\n}\n</code></pre>\n\n<p>The javascript runs, and the AppState values are updated (I added a console log to test this) <strong>BUT</strong> the navigation does not update to show the menu item and the H2 tag does not show the new string value...</p>\n\n<p>If you navigate to a page in the menu the state will update, but it won't again if you do a hard refresh....</p>\n\n<p>I tried adding a <strong>StateHasChanged()</strong> call but this did not work:</p>\n\n<pre><code>@code\n{\n    protected override async Task OnInitializedAsync()\n    {\n        var jwtToken = await JSRuntime.InvokeAsync&lt;string&gt;(\"getCookie\", \"cookieName\");\n\n        AppState.BoolValue = true;\n        AppState.StringValue = \"Testing 123...\";\n        StateHasChanged(); // Does not work!\n    }\n}\n</code></pre>\n\n<p>Since the state seemed to update after navigating I also tried forcing a navigation event, also to no avail:</p>\n\n<pre><code>@code\n{\n    protected override async Task OnInitializedAsync()\n    {\n        var jwtToken = await JSRuntime.InvokeAsync&lt;string&gt;(\"getCookie\", \"cookieName\");\n\n        AppState.BoolValue = true;\n        AppState.StringValue = \"Testing 123...\";\n\n        var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);\n        NavigationManager.NavigateTo(uri);\n    }\n}\n</code></pre>\n\n<p>I'm continuing to try a few other things but nothing seems to work. <strong>StateHasChanged()</strong> really should have been the fix for something like this in my understanding. Anything else I should try?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>As enet pointed out I need to notify downstream components when the state has changed. It wasn't the JSRuntime that caused an issue - but it was the DELAY that it created within App.razor that resulted in the object state seeming to be different on a hard refresh. In the first scenario the object was updated BEFORE the other components started rendering so they used the already updated state. But once there was any kind of delay (a call to JSRuntime for example) they required a notification in order to update their state because they had a chance to render prior to the delay using the older state. I replaced the JSRuntime call with a Task.Delay() of a few milliseconds and it resulted in the same issue! Adding a trigger to the event resolved this.</p>\n"
}