{
    "tags": [
        "c#",
        "iis",
        "blazor",
        "blazor-server-side",
        "blazor-client-side"
    ],
    "owner": {
        "reputation": 569,
        "user_id": 4250126,
        "user_type": "registered",
        "profile_image": "https://graph.facebook.com/100000650157504/picture?type=large",
        "display_name": "John Dover",
        "link": "https://stackoverflow.com/users/4250126/john-dover"
    },
    "is_answered": true,
    "view_count": 3597,
    "answer_count": 3,
    "score": 0,
    "last_activity_date": 1615985136,
    "creation_date": 1584461659,
    "question_id": 60726186,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/60726186/there-is-no-registered-service-of-type-microsoft-aspnetcore-components-authoriz",
    "title": "There is no registered service of type &#39;Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider&#39;",
    "body": "<p>While trying to find an answer to this question here: <a href=\"https://stackoverflow.com/questions/60624778/how-to-implement-server-side-blazor-custom-authorization-provider-correctly\">How to implement server side blazor Custom Authorization Provider Correctly</a> I have encountered a new error, that I am unsure how to resolve. Taking the template from @Henk Holterman's comment here: <a href=\"https://devblogs.microsoft.com/aspnet/blazor-webassembly-3-2-0-preview-2-release-now-available/\" rel=\"nofollow noreferrer\">https://devblogs.microsoft.com/aspnet/blazor-webassembly-3-2-0-preview-2-release-now-available/</a> I have been trying to develop some understanding how to implement web assembly blazor &amp; server-side blazor, and the differences between the two. </p>\n\n<p>Locally I can run my project and everything works as expected, I can login register and authorize a user. Once I deploy my application to IIS I start to receive WASM errors in console regarding no registered service 'AuthenticationStateProvider'.</p>\n\n<p>When I first deployed my application to IIS I also had issues with the appsettings.json file regarding the IdentityServer section, and I am wondering if I have broken something. The only section that I added was the \"Key\" section because I was receiving errors for no key filename defined. Which lead me to a stackoverflow post here: <a href=\"https://stackoverflow.com/questions/56094788/identityserver4-not-working-in-production\">IdentityServer4 not working in production</a>\n to help resolve by exporting ssl cert to use as a file, which I then included in my project directory on IIS.</p>\n\n<p>server-side appsettings.json</p>\n\n<pre><code>{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=aspnet-BlazorApp3.Server-A7F1C813-7F5D-4B96-8663-B8FA2E1472E8;Trusted_Connection=True;MultipleActiveResultSets=true\"\n  },\n  \"Logging\": {\n      \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n      }\n    },\n   \"IdentityServer\": {\n    \"Clients\": {\n      \"BlazorApp3.Client\": {\n      \"Profile\": \"IdentityServerSPA\"\n    }\n   },\n   \"Key\": {\n      \"Type\": \"File\",\n      \"FilePath\": \"CertName.pfx\",\n      \"Password\": \"CertPassword\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n</code></pre>\n\n<p>server-side blazor startup.cs\nI have included app.UsePathBase(\"client-side-blazor\") here because in IIS my application is not at the root node. It is a sub node of a site.</p>\n\n<pre><code> public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddLogging();\n\n        services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n            options.UseSqlServer(\n                Configuration.GetConnectionString(\"DefaultConnection\")));\n\n        services.AddDefaultIdentity&lt;ApplicationUser&gt;(options =&gt; options.SignIn.RequireConfirmedAccount = true)\n            .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;();\n\n        services.AddIdentityServer()\n            .AddApiAuthorization&lt;ApplicationUser, ApplicationDbContext&gt;();\n\n        services.AddAuthentication()\n            .AddIdentityServerJwt();\n\n        services.AddControllersWithViews();\n        services.AddRazorPages();\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n            app.UseDatabaseErrorPage();\n            app.UseWebAssemblyDebugging();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Error\");\n            // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n            app.UseHsts();\n        }\n\n        app.UsePathBase(\"/client-side-blazor\");\n\n        app.UseHttpsRedirection();\n        app.UseBlazorFrameworkFiles();\n        app.UseStaticFiles();\n\n        app.UseRouting();\n\n        app.UseAuthentication();\n        app.UseIdentityServer();\n        app.UseAuthorization();\n\n        app.UseEndpoints(endpoints =&gt;\n        {\n            endpoints.MapRazorPages();\n            endpoints.MapControllers();\n            endpoints.MapFallbackToFile(\"index.html\");\n        });\n    }\n</code></pre>\n\n<p>client-side webassembly blazor program.cs</p>\n\n<pre><code>public static async Task Main(string[] args)\n    {\n        var builder = WebAssemblyHostBuilder.CreateDefault(args);\n        builder.RootComponents.Add&lt;App&gt;(\"app\");\n\n        builder.Services.AddBaseAddressHttpClient();\n\n        //builder.Services.AddAuthorizationCore();\n\n        builder.Services.AddApiAuthorization();\n\n        await builder.Build().RunAsync();\n    }\n</code></pre>\n\n<p>builder.Services.AddAuthorizationCore() is commented out above, been trying to follow some other SO posts regarding my current issue.</p>\n\n<p>client blazor index.html</p>\n\n<pre><code>&lt;base href=\"/client-side-blazor/\"/&gt; \n</code></pre>\n\n<p>As a side note, it is still a little unclear what project to publish when creating a web assembly blazor project. In the references the server-side project has the client dll which makes my think that I should publish the server project, but I'm understanding from documentation that I could also deploy/publish just the web assembly project by itself (maybe as a stand alone project with no Authentication/Authorization). Any extra useful information that is easy to swallow would be greatly appreciated. </p>\n\n<p>Links I have used thus far in my research:</p>\n\n<p><a href=\"https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-3.1\" rel=\"nofollow noreferrer\">https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-3.1</a></p>\n\n<p><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/blazor/webassembly/standalone-with-authentication-library?view=aspnetcore-3.1\" rel=\"nofollow noreferrer\">https://docs.microsoft.com/en-us/aspnet/core/security/blazor/webassembly/standalone-with-authentication-library?view=aspnetcore-3.1</a> </p>\n\n<p><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/blazor/webassembly/hosted-with-identity-server?view=aspnetcore-3.1\" rel=\"nofollow noreferrer\">https://docs.microsoft.com/en-us/aspnet/core/security/blazor/webassembly/hosted-with-identity-server?view=aspnetcore-3.1</a></p>\n"
}