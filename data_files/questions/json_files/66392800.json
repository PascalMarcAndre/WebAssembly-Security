{
    "tags": [
        "javascript",
        "c#",
        "powerbi",
        "blazor-webassembly",
        "powerbi-embedded"
    ],
    "owner": {
        "reputation": 53,
        "user_id": 9182405,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/aa60cfe3be6b12825c32eddc9aeced02?s=128&d=identicon&r=PG&f=1",
        "display_name": "Dumas.DED",
        "link": "https://stackoverflow.com/users/9182405/dumas-ded"
    },
    "is_answered": false,
    "view_count": 80,
    "answer_count": 1,
    "score": 0,
    "last_activity_date": 1614414377,
    "creation_date": 1614373603,
    "last_edit_date": 1614373950,
    "question_id": 66392800,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/66392800/power-bi-embed-appears-to-be-literally-impossible-to-authenticate-in-a-blazor-we",
    "title": "Power BI Embed appears to be literally impossible to authenticate in a Blazor Webassembly application",
    "body": "<p>My team and I have tried this every way we can think of. Nothing has worked. We're ready to give up.</p>\n<p><strong>Attempt 1</strong> - a POST request using HttpClient():</p>\n<pre><code>public class PowerBIComponent : ComponentBase\n{\n    [Inject] IConfiguration Config { get; set; }\n\n    protected async override Task OnAfterRenderAsync(bool firstRender)\n    {\n        if (firstRender)\n        {\n            var token = await GetAccessToken();\n        }\n    }\n\n    public async Task&lt;string&gt; GetAccessToken()\n    {\n        var form = new Dictionary&lt;string, string&gt;();\n\n        form[&quot;grant_type&quot;] = &quot;client_credentials&quot;;\n        form[&quot;client_id&quot;] = Config[&quot;PowerBI:ClientId&quot;];\n        form[&quot;client_secret&quot;] = Config[&quot;PowerBI:ClientId&quot;];\n        form[&quot;scope&quot;] = &quot;https://graph.microsoft.com/.default&quot;;\n\n        var formContent = new FormUrlEncodedContent(form);\n\n        using (var client = new HttpClient())\n        {\n            client.DefaultRequestHeaders.TryAddWithoutValidation(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);\n\n            var response = await client.PostAsync(Config[&quot;PowerBI:AuthorityUrl&quot;], formContent);\n\n            return response.Content.ToString();\n        }\n    }\n}\n</code></pre>\n<p>This produces the following error:</p>\n<p><code>Access to fetch at 'https://login.microsoftonline.com/{our-tenant-id}/oauth2/token' from origin 'https://localhost:44364' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.</code></p>\n<p>Our infra guy has configured every allowable origin imaginable and it still hasn't resolved this issue. Bafflingly, the exact same request works just fine in Postman.</p>\n<p><strong>Attempt 2</strong> - using the Microsoft.PowerBI.API library:</p>\n<pre><code>public class PowerBIComponent : ComponentBase\n{\n    [Inject] IConfiguration Config { get; set; }\n\n    protected async override Task OnInitializedAsync()\n    {\n        Task.Delay(10000);\n    }\n\n    protected async override Task OnAfterRenderAsync(bool firstRender)\n    {\n        if (firstRender)\n        {\n            var token = await GetAccessToken();\n        }\n    }\n\n    public async Task&lt;string&gt; GetAccessToken()\n    {\n        var appConfidential = ConfidentialClientApplicationBuilder.Create(Config[&quot;PowerBI:ClientId&quot;])\n                            .WithClientSecret(Config[&quot;PowerBI:ClientSecret&quot;])\n                            .WithAuthority(Config[&quot;PowerBI:AuthorityUrl&quot;])\n                            .Build();\n            \n        string[] scopesDefault = new string[] { &quot;https://graph.microsoft.com/.default&quot; };\n\n        var authResult = appConfidential.AcquireTokenForClient(scopesDefault).ExecuteAsync().Result;\n\n        return authResult.AccessToken;\n    }\n}\n</code></pre>\n<p>This produces the following error:</p>\n<p><code>crit: Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100] Unhandled exception rendering component: Property UseDefaultCredentials is not supported.</code></p>\n<p>A quick google search led to <a href=\"https://developercommunity.visualstudio.com/t/blazor-webassembly-is-not-compatible-with-msalnet/903486\" rel=\"nofollow noreferrer\">this post</a>, which seems to suggest that this is an unavoidable compatibility issue in the library itself that has yet to be resolved.</p>\n<p><strong>Attempt 3</strong> - JSInterop and plain old Javascript:</p>\n<pre><code>window.PowerBI = {\ngetAccessToken: function () {\n    var form = {\n        grant_type: &quot;client_credentials&quot;,\n        client_id: &quot;my_super_secret_client_id&quot;,\n        client_secret: &quot;my_super_duper_client_secret&quot;,\n        scope: &quot;https://graph.microsoft.com/.default&quot;\n    }\n\n    $.ajax({\n        url: 'https://login.microsoftonline.com/my-tenant-id-goes-here/oauth2/token',\n        type: &quot;POST&quot;,\n        contentType: 'application/x-www-form-urlencoded',\n        data: form,\n        success: function (result) {\n            console.log(result);\n        },\n        error: function (xhr, resp, text) {\n            console.log(xhr, resp, text);\n        }\n    });\n}\n</code></pre>\n<p>This produces the same CORS error we were getting using HttpClient():</p>\n<p><code>Access to XMLHttpRequest at 'https://login.microsoftonline.com/dccb27bf-99c4-4985-b8d7-7581887a825e/oauth2/token' from origin 'https://localhost:44334' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</code></p>\n<p>We are quite simply trying to embed a Power BI report in our Blazor Webassembly application, however it seems to be categorically impossible to even get past the stage of retrieving an access token with which to embed anything. We're essentially at the point of giving up on Webassembly entirely and attempting to move everything over to Blazor Server instead. Is there any hope of us not having to do that?</p>\n"
}