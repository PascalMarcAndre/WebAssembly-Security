{
    "tags": [
        "javascript",
        "c++",
        "webassembly"
    ],
    "owner": {
        "reputation": 292,
        "user_id": 5147834,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/732459705630740316c5a2965662e056?s=128&d=identicon&r=PG&f=1",
        "display_name": "Axeon Thra",
        "link": "https://stackoverflow.com/users/5147834/axeon-thra"
    },
    "is_answered": true,
    "view_count": 512,
    "answer_count": 1,
    "score": 3,
    "last_activity_date": 1586607306,
    "creation_date": 1585930140,
    "last_edit_date": 1586607306,
    "question_id": 61015985,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/61015985/how-to-detect-failure-and-reset-restart-webassembly-module",
    "title": "How to detect failure and reset/restart webassembly Module?",
    "body": "<p>I am trying to get some C++ functions to run on the browser using WebSssembly. I am following this <a href=\"https://developers.google.com/web/updates/2018/03/emscripting-a-c-library\" rel=\"nofollow noreferrer\">tutorial</a>. I would like to know:</p>\n\n<ol>\n<li>How to detect (at JS side) an 'uncaught exception' coming from C++ code?</li>\n<li>How to reset/restart WebAssembly Module generated by <code>emcc</code> in a way that avoids memory leaks?</li>\n</ol>\n\n<p>Adding exception catching functionality (<code>DISABLE_EXCEPTION_CATCHING=0</code>) seems to increase the file size too much.</p>\n\n<p>Any help will be greatly appreciated.</p>\n\n<hr>\n\n<p>The sample C++ code is as follows:</p>\n\n<pre><code>// C++ source code (fib.cc)\n\n#include &lt;stdexcept&gt;\n#include &lt;emscripten.h&gt;\n\nextern \"C\" {\n\nEMSCRIPTEN_KEEPALIVE\nint fib(int n) {\n  if (n &gt; 12) {\n    throw std::out_of_range(\"input out of range\");\n  }\n  int i, t, a = 0, b = 1;\n  for (i = 0; i &lt; n; i++) {\n    t = a + b;\n    a = b;\n    b = t;\n  }\n  return b;\n}\n\n// &gt;&gt;\n// other functions with allocations/deallocations\n\n} // end of extern C\n</code></pre>\n\n<p>It is built with the command:</p>\n\n<pre><code>emcc -O3 -s WASM=1 -s EXTRA_EXPORTED_RUNTIME_METHODS='[\"cwrap\"]' fib.cc\n</code></pre>\n\n<p>It is tested with a webpage:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;WASM Test Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;script src=\"a.out.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n\"use strict\";\n\nModule.onRuntimeInitialized = _ =&gt; {\n  const fib = Module.cwrap('fib', 'number', ['number']);\n  console.log(fib(10));\n  console.log(fib(14)); // causes exception\n};\n\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"
}