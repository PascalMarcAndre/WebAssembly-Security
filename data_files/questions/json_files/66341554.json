{
    "tags": [
        "blazor",
        "identityserver4",
        "blazor-webassembly"
    ],
    "owner": {
        "reputation": 1,
        "user_id": 13157126,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/aa4e0dfe815067b38caffb99914303e1?s=128&d=identicon&r=PG&f=1",
        "display_name": "Garett Cooper",
        "link": "https://stackoverflow.com/users/13157126/garett-cooper"
    },
    "is_answered": false,
    "view_count": 31,
    "answer_count": 1,
    "score": 0,
    "last_activity_date": 1614213630,
    "creation_date": 1614116753,
    "question_id": 66341554,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/66341554/blazor-webassembly-application-performs-oidc-silent-sign-in-multiple-times-a-sec",
    "title": "Blazor WebAssembly Application Performs OIDC Silent Sign-in Multiple Times a Second",
    "body": "<p>I've encountered a very frustrating issue using .NET 5.0.2 Blazor WebAssembly and OIDC Authentication with IdentityServer4. Loading the page in a new tab works as expected, but when an error occurs on the page or the tab is reloaded, the application gets stuck in an infinite silent sign-in loop, making requests in sequence to <code>/connect/authorize</code>, <code>/.well-known/openid-configuration</code>, <code>/connect/token</code> multiple times a second through a hidden iframe. As the issue implies, it only occurs when a user is logged in.</p>\n<p><strong>OIDC Authentication Configuraion</strong></p>\n<pre class=\"lang-cs prettyprint-override\"><code>builder.Services.AddOidcAuthentication(options =&gt; {\n                options.ProviderOptions.Authority = &quot;https://localhost:5001/&quot;;\n                options.ProviderOptions.ClientId = &quot;client-id&quot;;\n                options.ProviderOptions.DefaultScopes.Add(&quot;openid&quot;);\n                options.ProviderOptions.DefaultScopes.Add(&quot;profile&quot;);\n                options.ProviderOptions.DefaultScopes.Add(&quot;roles&quot;);\n                options.ProviderOptions.PostLogoutRedirectUri = &quot;/&quot;;\n                options.ProviderOptions.ResponseType = &quot;code&quot;;\n\n                options.UserOptions.RoleClaim = &quot;role&quot;;\n            });\n</code></pre>\n<p><strong>App.razor</strong></p>\n<pre class=\"lang-html prettyprint-override\"><code>&lt;CascadingAuthenticationState&gt;\n    &lt;CascadingBlazoredModal&gt;\n        &lt;Router AppAssembly=&quot;@typeof(Program).Assembly&quot;&gt;\n            &lt;Found Context=&quot;routeData&quot;&gt;\n                &lt;AuthorizeRouteView RouteData=&quot;@routeData&quot; DefaultLayout=&quot;@typeof(MainLayout)&quot;&gt;\n                    &lt;Authorizing&gt;\n                        &lt;div class=&quot;screen-centred auth-spinner&quot;&gt;\n                            &lt;Spinner /&gt;\n                        &lt;/div&gt;\n                    &lt;/Authorizing&gt;\n                    &lt;NotAuthorized&gt;\n                        @if (!context.User.Identity.IsAuthenticated) {\n                            &lt;RedirectToLogin /&gt;\n                        } else {\n                            &lt;p&gt;You are not authorized to access this resource.&lt;/p&gt;\n                        }\n                    &lt;/NotAuthorized&gt;\n                &lt;/AuthorizeRouteView&gt;\n            &lt;/Found&gt;\n            &lt;NotFound&gt;\n                &lt;LayoutView Layout=&quot;@typeof(MainLayout)&quot;&gt;\n                    &lt;p&gt;Sorry, there's nothing at this address.&lt;/p&gt;\n                &lt;/LayoutView&gt;\n            &lt;/NotFound&gt;\n        &lt;/Router&gt;\n    &lt;/CascadingBlazoredModal&gt;\n&lt;/CascadingAuthenticationState&gt;\n\n</code></pre>\n<p><strong>Identity Server Configuration</strong></p>\n<pre class=\"lang-cs prettyprint-override\"><code>public void ConfigureServices(IServiceCollection services) {\n            services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n                options.UseNpgsql(Configuration.GetConnectionString(&quot;IdentityContext&quot;)).UseSnakeCaseNamingConvention());\n\n            services.AddIdentity&lt;ApplicationUser, IdentityRole&lt;Guid&gt;&gt;()\n                    .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()\n                    .AddDefaultTokenProviders();\n\n            IIdentityServerBuilder? builder = services.AddIdentityServer(options =&gt; {\n                                                          options.Events.RaiseErrorEvents = true;\n                                                          options.Events.RaiseInformationEvents = true;\n                                                          options.Events.RaiseFailureEvents = true;\n                                                          options.Events.RaiseSuccessEvents = true;\n\n                                                          // see https://identityserver4.readthedocs.io/en/latest/topics/resources.html\n                                                          options.EmitStaticAudienceClaim = true;\n                                                      })\n                                                      .AddInMemoryIdentityResources(Config.IdentityResources)\n                                                      .AddInMemoryApiScopes(Config.ApiScopes)\n                                                      .AddInMemoryClients(Config.Clients)\n                                                      .AddAspNetIdentity&lt;ApplicationUser&gt;();\n\n            builder.AddDeveloperSigningCredential();\n\n            services.AddAuthentication();\n        }\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/cY8Tx.png\" rel=\"nofollow noreferrer\">Image of the Initiatior Chain from Chrome</a></p>\n<p>I've gone through all my code and the issue isn't caused by any of my uses of the AuthenticationStateProvider service, so I assume it is the result of a misconfiguration. I haven't found any other reports of this issue online, I'm not sure what I could've misconfigured that would cause this issue.</p>\n"
}