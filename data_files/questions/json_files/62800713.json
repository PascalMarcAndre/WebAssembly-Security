{
    "tags": [
        "c#",
        "asp.net-core",
        "blazor",
        "identity"
    ],
    "owner": {
        "reputation": 386,
        "user_id": 1584725,
        "user_type": "registered",
        "accept_rate": 67,
        "profile_image": "https://www.gravatar.com/avatar/3b4af23cd0ebfb961c3ab01ffd884073?s=128&d=identicon&r=PG",
        "display_name": "Brett JB",
        "link": "https://stackoverflow.com/users/1584725/brett-jb"
    },
    "is_answered": false,
    "view_count": 156,
    "answer_count": 0,
    "score": 0,
    "last_activity_date": 1612607344,
    "creation_date": 1594230574,
    "last_edit_date": 1594282143,
    "question_id": 62800713,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/62800713/problems-with-usermanager-in-asp-net-core-identity",
    "title": "Problems with usermanager in asp net core identity",
    "body": "<p>I am writing a Blazor webassembly app, but I dont think this is a Blazor issue, more likely my lack of experience with asp net core.\nI am trying to update a users data and have a function in my controller to add or update a user.\nIn my controller, I am injecting as follows:</p>\n<pre><code>       // Assign the object in the constructor for dependency injection\n       public ApplicationUserController(TTPlannerDbContext context, IMapper mapper, UserManager&lt;ApplicationUser&gt; userManager, SignInManager&lt;ApplicationUser&gt; signInManager)\n    {\n        _context = context;\n        _mapper = mapper;\n        _userManager = userManager;\n        _signInManager = signInManager;\n    }\n</code></pre>\n<p>When I come to update a user, I can make it work, but some functions don't seem to work.\nThe addupdate is like this:</p>\n<pre><code>     [HttpPost]\n     [Route(&quot;AddUpdateUser&quot;)]\n     public async Task&lt;ActionResult&lt;ApplicationUserDTO&gt;&gt; AddUpdateUser(ApplicationUserDTO sentUser)\n     {\n        if (!ModelState.IsValid)\n        {\n            return BadRequest(ModelState);\n        }\n        // Get the logged in user.\n          // This line should work but doesnt and I dont know why.\n          // ApplicationUser loggedinUser = await _userManager.GetUserAsync(User).ConfigureAwait(false);   &lt;&lt;&lt;***\n          string loggedinUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);\n          ApplicationUser loggedinUser = _context.Users.Find(loggedinUserId);\n          IList&lt;string&gt; roles = await _userManager.GetRolesAsync(loggedinUser);\n          if (roles.Contains(AllowedRoles.administrator.ToString()) ||\n              (sentUser.Id == loggedinUser.Id)) // If the logged in user is an admin or the person edited then allow the update\n          {\n              ApplicationUser foundUser = _context.Users.Find(sentUser.Id);\n              if (foundUser != null)\n                {\n                  _mapper.Map(sentUser, foundUser);\n                  var saveresult  = await _context.SaveChangesAsync();\n                  // Update the roles\n                  IList&lt;string&gt; availableroles = (IList&lt;string&gt;)Enum.GetNames(typeof(AllowedRoles));\n                  // First remove from all\n                  await _userManager.RemoveFromRolesAsync(foundUser,availableroles);\n                  //Then add back\n                  await _userManager.AddToRolesAsync(foundUser, sentUser.Roles);\n                  // This works fine....\n                  //foreach (string role in sentUser.Roles)\n                  //{\n                  //    if (!roles.Contains(role))\n                  //    {\n                  //        await _userManager.AddToRoleAsync(foundUser, role);\n                  //    }\n                  //}\n                  if (saveresult ==1)\n                  {\n                      return Ok(sentUser);\n                  }\n              }\n          }\n          return Ok(sentUser);\n      }\n</code></pre>\n<p>The first function that isn't working is the:</p>\n<pre><code>          ApplicationUser loggedinUser = await _userManager.GetUserAsync(User).ConfigureAwait(false);\n</code></pre>\n<p>This just returns null.\nI worked around this using:</p>\n<pre><code>          string loggedinUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);\n          ApplicationUser loggedinUser = _context.Users.Find(loggedinUserId);\n</code></pre>\n<p>Which works fine...</p>\n<p>Then i got to update the user and the basic update works fine but the role update doesnt.</p>\n<pre><code>                // This works fine....\n                //foreach (string role in sentUser.Roles)\n                //{\n                //    if (!roles.Contains(role))\n                //    {\n                //        await _userManager.AddToRoleAsync(foundUser, role);\n                //    }\n                //}\n</code></pre>\n<p>But then I need to delete the roles removed too. So I thought I would just call the</p>\n<pre><code>                    await _userManager.RemoveFromRolesAsync(foundUser,availableroles);\n</code></pre>\n<p>to delete all roles and add back. Maybe not the most efficient but not being done very often, and felt cleaner somehow.\nThis doesnt work, and neither does the addtoroles function.\nI feel I am missing something. Are there some additions or extensions to the usermanager that I need to register in the startup or inject as well? Or am I missing something else?</p>\n<p>My startup.cs code that handles the usermanager is as follows:</p>\n<p>In the configureservices I have:</p>\n<pre><code>          services.AddIdentityServer()\n              .AddApiAuthorization&lt;ApplicationUser, TTPlannerDbContext&gt;(options =&gt; {\n                options.IdentityResources[&quot;openid&quot;].UserClaims.Add(&quot;name&quot;);\n                options.ApiResources.Single().UserClaims.Add(&quot;name&quot;);\n                options.IdentityResources[&quot;openid&quot;].UserClaims.Add(&quot;role&quot;);\n                options.ApiResources.Single().UserClaims.Add(&quot;role&quot;);\n            });\n</code></pre>\n"
}