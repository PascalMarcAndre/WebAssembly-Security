{
    "tags": [
        "c#",
        "asp.net-core",
        "identityserver4",
        "blazor",
        "blazor-webassembly"
    ],
    "owner": {
        "reputation": 21,
        "user_id": 4355492,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/c1f8a8dccde8942ba23ec89b04791518?s=128&d=identicon&r=PG&f=1",
        "display_name": "Jabo",
        "link": "https://stackoverflow.com/users/4355492/jabo"
    },
    "is_answered": true,
    "view_count": 543,
    "answer_count": 3,
    "score": 2,
    "last_activity_date": 1608258043,
    "creation_date": 1604957946,
    "last_edit_date": 1604997209,
    "question_id": 64759626,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/64759626/there-was-an-error-trying-to-log-you-in-blazor-webassembly-using-identiys",
    "title": "&quot;There was an error trying to log you in: &#39;&#39; &quot; Blazor WebAssembly using IdentiyServer Authentication",
    "body": "<p>I have a Blazor WebAssembly app using IdentityServer that comes with the template as my authentication service. I am having an issue where some users are seeing &quot;There was an error trying to log you in: ''&quot; once they try to login. I had users clear cookies and cache, and they are still experiencing this problem in all their browsers. The weird thing is that most users are able to login, but only a small percent is getting that error. Another odd thing is that it seems like if they use another device such as a phone, another pc, or ipad it works. What could be causing this issue? I have been having trouble trying to debug this issue as I am not able to replicate it on my end and so far not seeing any logs to get any info.</p>\n<p>This app is hosted in Google Cloud Platform using linux Docker container.</p>\n<p>Thank you in advance</p>\n<p>Edit: Here is my startup class</p>\n<pre><code>public class Startup\n{\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    readonly string MyAllowSpecificOrigins = &quot;_myAllowSpecificOrigins&quot;;\n    private const string XForwardedPathBase = &quot;X-Forwarded-PathBase&quot;;\n    private const string XForwardedProto = &quot;X-Forwarded-Proto&quot;;\n\n    // This method gets called by the runtime. Use this method to add services to the container.\n    // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddCors(options =&gt;\n        {\n            options.AddPolicy(name: MyAllowSpecificOrigins,\n                              builder =&gt;\n                              {\n                                  builder.WithOrigins(&quot;https://www.fakedomainexample.com&quot;,\n                                                      &quot;https://fakedomainexample.com&quot;);\n                              });\n        });\n\n        services.AddHttpContextAccessor();\n\n        services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n            options.UseMySql(\n                Configuration.GetConnectionString(&quot;ConnectionString&quot;)));\n\n        services.AddDefaultIdentity&lt;ApplicationUser&gt;(options =&gt; options.SignIn.RequireConfirmedAccount = true)\n            .AddRoles&lt;IdentityRole&gt;()\n            .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;();\n\n        // For some reason, I need to explicitly assign the IssuerUri or else site gets invalid_issuer error\n        services.AddIdentityServer(x =&gt; x.IssuerUri = &quot;https://www.fakedomainexample.com&quot;).AddApiAuthorization&lt;ApplicationUser, ApplicationDbContext&gt;(options =&gt; {\n            options.IdentityResources[&quot;openid&quot;].UserClaims.Add(&quot;name&quot;);\n            options.ApiResources.Single().UserClaims.Add(&quot;name&quot;);\n            options.IdentityResources[&quot;openid&quot;].UserClaims.Add(&quot;role&quot;);\n            options.ApiResources.Single().UserClaims.Add(&quot;role&quot;);\n        });\n        JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Remove(&quot;role&quot;);\n\n        services.Configure&lt;IdentityOptions&gt;(options =&gt;\n        {\n            // Password settings.\n            options.Password.RequireDigit = true;\n            options.Password.RequireLowercase = true;\n            options.Password.RequireNonAlphanumeric = true;\n            options.Password.RequireUppercase = true;\n            options.Password.RequiredLength = 8;\n            options.Password.RequiredUniqueChars = 1;\n\n            // User settings.\n            options.User.AllowedUserNameCharacters = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;;\n            options.User.RequireUniqueEmail = true;\n            options.SignIn.RequireConfirmedAccount = false;\n        });\n\n        // Added Cookie options below to fix an issue with login redirect in Chrome for http\n        // https://stackoverflow.com/questions/60757016/identity-server-4-post-login-redirect-not-working-in-chrome-only\n        // This one worked: https://stackoverflow.com/questions/63449387/cannot-redirect-back-to-angular-client-after-login-in-identity-server\n        services.ConfigureExternalCookie(option =&gt;\n        {\n            option.LoginPath = &quot;/Account/Login&quot;;\n            option.Cookie.IsEssential = true;\n            option.Cookie.SameSite = SameSiteMode.Lax;\n        });\n        services.ConfigureApplicationCookie(option =&gt;\n        {\n            option.LoginPath = &quot;/Account/Login&quot;;\n            option.Cookie.IsEssential = true;\n            option.Cookie.SameSite = SameSiteMode.Lax;\n        });\n\n\n        services.AddAuthentication()\n            .AddIdentityServerJwt();\n\n        services.AddControllersWithViews();\n        services.AddRazorPages();\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseForwardedHeaders(new ForwardedHeadersOptions\n        {\n            ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto\n        });\n\n        app.UseRewriter(new RewriteOptions()\n            .AddRedirectToWwwPermanent());\n\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n            app.UseDatabaseErrorPage();\n            app.UseWebAssemblyDebugging();\n        }\n        else\n        {\n            app.UseExceptionHandler(&quot;/Error&quot;);\n            // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n            app.UseHsts();\n        }\n        app.Use((context, next) =&gt;\n        {\n            if (context.Request.Headers.TryGetValue(XForwardedPathBase, out StringValues pathBase))\n            {\n                context.Request.PathBase = new PathString(pathBase);\n            }\n\n            if (context.Request.Headers.TryGetValue(XForwardedProto, out StringValues proto))\n            {\n                context.Request.Scheme = proto;\n            }\n        //context.SetIdentityServerOrigin(&quot;https://www.fakedomainexample.com&quot;); \n        return next();\n        });\n        app.UseHttpsRedirection();\n        app.UseBlazorFrameworkFiles();\n        \n        const string cacheMaxAge = &quot;3600&quot;;\n        app.UseStaticFiles(new StaticFileOptions\n        {\n            OnPrepareResponse = ctx =&gt;\n            {\n                ctx.Context.Response.Headers.Add(&quot;Cache-Control&quot;, $&quot;public, max-age={cacheMaxAge}&quot;);\n            }\n        });\n        app.UseCookiePolicy(new CookiePolicyOptions\n        {\n            MinimumSameSitePolicy = Microsoft.AspNetCore.Http.SameSiteMode.Lax,\n        });\n\n        app.UseRouting();\n        app.UseCors(MyAllowSpecificOrigins);\n\n        app.UseIdentityServer();\n        app.UseAuthentication();\n        app.UseAuthorization();\n\n        app.UseEndpoints(endpoints =&gt;\n        {\n            endpoints.MapRazorPages();\n            endpoints.MapControllers();\n            endpoints.MapFallbackToFile(&quot;index.html&quot;);\n        });\n    }\n}\n</code></pre>\n"
}