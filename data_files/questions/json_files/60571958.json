{
    "tags": [
        "c#",
        "asp.net-core",
        "blazor"
    ],
    "owner": {
        "reputation": 2576,
        "user_id": 10823490,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/58aab0dd119c8dac4dc2bc5a209c3f11?s=128&d=identicon&r=PG&f=1",
        "display_name": "Jackal",
        "link": "https://stackoverflow.com/users/10823490/jackal"
    },
    "is_answered": true,
    "view_count": 2628,
    "accepted_answer_id": 60573139,
    "answer_count": 4,
    "score": 6,
    "last_activity_date": 1601154143,
    "creation_date": 1583530696,
    "question_id": 60571958,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/60571958/blazor-default-constructor-not-found-for-type-microsoft-aspnetcore-components-au",
    "title": "Blazor Default constructor not found for type Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
    "body": "<p>I cannot understand why do i keep getting this exception. I try to secure a Blazor WebAssembly</p>\n\n<blockquote>\n  <p>blazor.webassembly.js:1 WASM: System.MissingMethodException: Default\n  constructor not found for type\n  Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView</p>\n</blockquote>\n\n<p>app.razor</p>\n\n<pre><code>&lt;Router AppAssembly=\"@typeof(Program).Assembly\"&gt;\n    &lt;Found Context=\"routeData\"&gt;\n        &lt;AuthorizeRouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\" /&gt;\n    &lt;/Found&gt;\n    &lt;NotFound&gt;\n        &lt;CascadingAuthenticationState&gt;\n            &lt;LayoutView Layout=\"@typeof(MainLayout)\"&gt;\n                &lt;p&gt;Sorry, there's nothing at this address.&lt;/p&gt;\n            &lt;/LayoutView&gt;\n        &lt;/CascadingAuthenticationState&gt;\n    &lt;/NotFound&gt;\n&lt;/Router&gt;\n</code></pre>\n\n<p>this is the client program.cs</p>\n\n<pre><code>    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add&lt;App&gt;(\"app\");\n            builder.Services.AddScoped&lt;AuthenticationStateProvider, ApiAuthenticationStateProvider&gt;();\n            builder.Services.AddAuthorizationCore(options =&gt; { });            \n            await builder.Build().RunAsync();\n        }\n    }\n</code></pre>\n\n<p>the custom auth state provider</p>\n\n<pre><code>public class ApiAuthenticationStateProvider : AuthenticationStateProvider\n{\n    private readonly HttpClient _httpClient;\n    private readonly ILocalStorageService _localStorage;\n\n    public ApiAuthenticationStateProvider(HttpClient httpClient, ILocalStorageService localStorage)\n    {\n        _httpClient = httpClient;\n        _localStorage = localStorage;\n    }\n    public override async Task&lt;AuthenticationState&gt; GetAuthenticationStateAsync()\n    {\n        var savedToken = await _localStorage.GetItemAsync&lt;string&gt;(\"authToken\");\n\n        if (string.IsNullOrWhiteSpace(savedToken))\n        {\n            return new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()));\n        }\n\n        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"bearer\", savedToken);\n\n        return new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity(ParseClaimsFromJwt(savedToken), \"jwt\")));\n    }\n\n    public void MarkUserAsAuthenticated(string email)\n    {\n        ClaimsPrincipal authenticatedUser = new ClaimsPrincipal(new ClaimsIdentity(new[] { new Claim(ClaimTypes.Name, email) }, \"apiauth\"));\n        var authState = Task.FromResult(new AuthenticationState(authenticatedUser));\n        NotifyAuthenticationStateChanged(authState);\n    }\n\n    public void MarkUserAsLoggedOut()\n    {\n        var anonymousUser = new ClaimsPrincipal(new ClaimsIdentity());\n        var authState = Task.FromResult(new AuthenticationState(anonymousUser));\n        NotifyAuthenticationStateChanged(authState);\n    }\n\n    private IEnumerable&lt;Claim&gt; ParseClaimsFromJwt(string jwt)\n    {\n        var claims = new List&lt;Claim&gt;();\n        var payload = jwt.Split('.')[1];\n        var jsonBytes = ParseBase64WithoutPadding(payload);\n        var keyValuePairs = JsonSerializer.Deserialize&lt;Dictionary&lt;string, object&gt;&gt;(jsonBytes);\n\n        keyValuePairs.TryGetValue(ClaimTypes.Role, out object roles);\n\n        if (roles != null)\n        {\n            if (roles.ToString().Trim().StartsWith(\"[\"))\n            {\n                var parsedRoles = JsonSerializer.Deserialize&lt;string[]&gt;(roles.ToString());\n\n                foreach (var parsedRole in parsedRoles)\n                {\n                    claims.Add(new Claim(ClaimTypes.Role, parsedRole));\n                }\n            }\n            else\n            {\n                claims.Add(new Claim(ClaimTypes.Role, roles.ToString()));\n            }\n\n            keyValuePairs.Remove(ClaimTypes.Role);\n        }\n\n        claims.AddRange(keyValuePairs.Select(kvp =&gt; new Claim(kvp.Key, kvp.Value.ToString())));\n\n        return claims;\n    }\n\n    private byte[] ParseBase64WithoutPadding(string base64)\n    {\n        switch (base64.Length % 4)\n        {\n            case 2: base64 += \"==\"; break;\n            case 3: base64 += \"=\"; break;\n        }\n        return Convert.FromBase64String(base64);\n    }\n}\n</code></pre>\n\n<p>}</p>\n\n<p>the server startup.cs</p>\n\n<pre><code>  public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n\n            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n                .AddJwtBearer(options =&gt;\n                {\n                    options.TokenValidationParameters = new TokenValidationParameters\n                    {\n                        ValidateIssuer = true,\n                        ValidateAudience = true,\n                        ValidateLifetime = true,\n                        ValidateIssuerSigningKey = true,\n                        ValidIssuer = Configuration[\"JwtIssuer\"],\n                        ValidAudience = Configuration[\"JwtAudience\"],\n                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[\"JwtSecurityKey\"]))\n                    };\n                });\n\n            services.AddBlazoredLocalStorage();\n            services.AddAuthorizationCore();\n            services.AddScoped&lt;AuthenticationStateProvider, ApiAuthenticationStateProvider&gt;();\n            services.AddScoped&lt;IAuthService, AuthService&gt;();\n\n            services.AddMvc();\n            services.AddResponseCompression(opts =&gt;\n            {\n                opts.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(\n                    new[] { \"application/octet-stream\" });\n            });\n\n\n            services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n\n            services.AddDefaultIdentity&lt;IdentityUser&gt;()\n                .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            app.UseResponseCompression();\n\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseBlazorDebugging();\n            }\n\n            app.UseStaticFiles();\n            app.UseClientSideBlazorFiles&lt;Client.Program&gt;();\n\n            app.UseRouting();\n\n            app.UseAuthentication();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =&gt;\n            {\n                endpoints.MapDefaultControllerRoute();\n                endpoints.MapFallbackToClientSideBlazor&lt;Client.Program&gt;(\"index.html\");\n            });\n        }\n    }\n</code></pre>\n"
}