{
    "tags": [
        "authentication",
        "oauth-2.0",
        "asp.net-identity",
        "microsoft-identity-platform",
        "identitymodel"
    ],
    "owner": {
        "reputation": 503,
        "user_id": 1464438,
        "user_type": "registered",
        "accept_rate": 92,
        "profile_image": "https://i.stack.imgur.com/CPxh2.jpg?s=128&g=1",
        "display_name": "Taylor C. White",
        "link": "https://stackoverflow.com/users/1464438/taylor-c-white"
    },
    "is_answered": false,
    "view_count": 184,
    "answer_count": 0,
    "score": 0,
    "last_activity_date": 1600317279,
    "creation_date": 1599500307,
    "last_edit_date": 1600317279,
    "question_id": 63782028,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/63782028/understanding-using-microsoft-identity",
    "title": "Understanding &amp; Using Microsoft Identity",
    "body": "<p>Background: I'm developing my first enterprise software solution as a part of starting my software company. I'm developing on .NET Core.</p>\n<p>I've been reading through all of the Microsoft documentation regarding Authentication vs. Authorization, AzureAD, Identity Server hosted, etc..</p>\n<p>I'm struggling to understand some of the larger design philosophies and strategies around users in the modern environment of OAuth 2.0 where another service Authenticates the user and sends back claims.</p>\n<p>Current State: Currently, I am able to login using Blazor and AzureAD with Microsoft accounts. When a user logs in, I get their user identifier using <code>HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier)</code> on the request, which may have additional claims like their name or email. Since I'm not using Identity hosted where the user data is stored on a local database.</p>\n<h2>Questions regarding interacting with Microsoft Identity / AzureAD</h2>\n<ol>\n<li>If I want code to execute after the user logs in, using their login data, how is one supposed to do that? An example use case: <em>User has a 'theme' associated with their account. They login, and I want code to run that applies that theme into the DOM for them after login</em></li>\n<li>User data modeling? Since a user authenticates with another service who says &quot;yes, this person is authenticated&quot;, my service basically has no information about them. I want to store info associated with the <code>NameIdentifier</code> I get back from the auth service so that I can build a &quot;profile&quot; for this person. A use case for this is:</li>\n</ol>\n<blockquote>\n<p>Taylor White logs into Enterprise News Service Inc.. He comments on an article, the comment is saved with a <code>string UserId</code>, and\n<code>string CommentContent</code>. When someone goes to that article though, I\nwant to pull information about Taylor, like his name and photo, but\nI don't have any database currently modeling the user or storing the\nclaims that I get back from the identity provider.</p>\n</blockquote>\n<p>In short, what am I missing regarding these scenarios?</p>\n<ul>\n<li>Performing some logic after a successful login</li>\n<li>Best practices for storing user data from an identity provider and accessing it in other contexts like loading comments from different users.</li>\n</ul>\n<p>Additional Info:</p>\n<ul>\n<li>I'm using Blazor WebAssembly for my front-end which also runs on .NET.</li>\n<li>I'm using a .NET Core backend.</li>\n</ul>\n"
}