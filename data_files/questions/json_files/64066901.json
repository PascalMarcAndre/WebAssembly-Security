{
    "tags": [
        "c#",
        "authentication",
        "jwt",
        "blazor",
        "asp.net-roles"
    ],
    "owner": {
        "reputation": 394,
        "user_id": 9181182,
        "user_type": "registered",
        "profile_image": "https://i.stack.imgur.com/vIOji.jpg?s=128&g=1",
        "display_name": "Kaan Taze",
        "link": "https://stackoverflow.com/users/9181182/kaan-taze"
    },
    "is_answered": false,
    "view_count": 74,
    "answer_count": 0,
    "score": 0,
    "last_activity_date": 1601046957,
    "creation_date": 1601046957,
    "question_id": 64066901,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/64066901/adding-roles-to-user-claims-with-custom-authentication-in-blazor-mobile-blazor",
    "title": "Adding Roles To User Claims with Custom Authentication in Blazor (Mobile Blazor Bindings)",
    "body": "<p>I'm building an application with Mobile Blazor Bindings. I've added a new Web Application project to use it as a server and I can successfully login with the custom authentication. My project structure looks like this:</p>\n<p><a href=\"https://i.stack.imgur.com/zq7D0.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/zq7D0.png\" alt=\"Project Structure\" /></a></p>\n<p>So it's almost like default Blazor WebAssembly app.</p>\n<h3>TL;DR : How Do I Add Role Claims to JWT?</h3>\nLonger Explanation of the Question:\n<p>On Server-side as I said, it's just a web application and I created a database which inherits IdentityDbContext. It looks like this:\n<a href=\"https://i.stack.imgur.com/zQHdo.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/zQHdo.png\" alt=\"db tables\" /></a></p>\n<hr />\n<p>How the custom Authentication works:</p>\n<ol>\n<li>On Client Side, MainLayout.razor checks if your authenticated:</li>\n</ol>\n<pre><code>   protected override async Task OnParametersSetAsync()\n    {\n        if (!(await AuthenticationState).User.Identity.IsAuthenticated)\n        {\n            navigationManager.NavigateTo(&quot;/login&quot;);\n        }\n    }\n    async Task LogoutClick()\n    {\n        await authStateProvider.Logout();\n        navigationManager.NavigateTo(&quot;/login&quot;);\n    }\n</code></pre>\n<ol start=\"2\">\n<li>You type the username and password on login page. OnSubmit button invokes Login method in AuthStateProvider.</li>\n</ol>\n<pre><code>@code{\n    LoginRequest loginRequest { get; set; } = new LoginRequest();\n    string error { get; set; }\n\n    async Task OnSubmit()\n    {\n        error = null;\n        try\n        {\n            await authStateProvider.Login(loginRequest);\n            navigationManager.NavigateTo(&quot;&quot;);\n        }\n        catch (Exception ex)\n        {\n            error = ex.Message;\n        }\n    }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Here is AuthStateProvider:\nAuthService is just the sending LoginRequest (The Form) to Controller via http.</li>\n</ol>\n<pre><code> public class CustomStateProvider : AuthenticationStateProvider\n    {\n        private readonly IAuthService api;\n        private CurrentUser _currentUser;\n        HttpClient http = AppState._http;\n        public CustomStateProvider(IAuthService api)\n        {\n            this.api = api;\n        }\n        public override async Task&lt;AuthenticationState&gt; GetAuthenticationStateAsync()\n        {\n            var identity = new ClaimsIdentity();\n            try\n            {\n                var userInfo = await GetCurrentUser();\n                if (userInfo.IsAuthenticated)\n                {\n                    var claims = new[] {\n                        new Claim(ClaimTypes.Name, _currentUser.UserName)\n                    }.Concat(_currentUser.Claims.Select(c =&gt; new Claim(c.Key, c.Value)));\n\n                    identity = new ClaimsIdentity(claims, &quot;Server authentication&quot;);\n                }\n            }\n            catch (HttpRequestException ex)\n            {\n                Console.WriteLine(&quot;Request failed:&quot; + ex.ToString());\n            }\n\n            return new AuthenticationState(new ClaimsPrincipal(identity));\n        }\n\n        private async Task&lt;CurrentUser&gt; GetCurrentUser()\n        {\n            if (_currentUser != null &amp;&amp; _currentUser.IsAuthenticated) return _currentUser;\n            _currentUser = await api.CurrentUserInfo();\n            return _currentUser;\n        }\n        public async Task Logout()\n        {\n          // same as login\n        }\n        public async Task Login(LoginRequest loginParameters)\n        {\n            await api.Login(loginParameters);\n            NotifyAuthenticationStateChanged(GetAuthenticationStateAsync());\n        }\n        public async Task Register(RegisterRequest registerParameters)\n        {\n          // same as login\n        }\n    }\n</code></pre>\n<ol start=\"4\">\n<li>On server side, there is a controller which handles login/logout and registration</li>\n</ol>\n<p>AuthController:</p>\n<pre><code> [Route(&quot;api/[controller]/[action]&quot;)]\n    [ApiController]\n    public class AuthController : ControllerBase\n    {\n        private readonly UserManager&lt;ApplicationUser&gt; _userManager;\n        private readonly SignInManager&lt;ApplicationUser&gt; _signInManager;\n        public AuthController(UserManager&lt;ApplicationUser&gt; userManager, SignInManager&lt;ApplicationUser&gt; signInManager)\n        {\n            _userManager = userManager;\n            _signInManager = signInManager;\n        }\n        [HttpPost]\n        public async Task&lt;IActionResult&gt; Login(LoginRequest request)\n        {\n            var user = await _userManager.FindByNameAsync(request.UserName);\n            if (user == null) return BadRequest(&quot;User does not exist&quot;);\n            var singInResult = await _signInManager.CheckPasswordSignInAsync(user, request.Password, false);\n            if (!singInResult.Succeeded) return BadRequest(&quot;Invalid password&quot;);\n            await _signInManager.SignInAsync(user, request.RememberMe);\n            return Ok();\n        }\n        [HttpPost]\n        public async Task&lt;IActionResult&gt; Register(RegisterRequest parameters)\n        {\n            var user = new ApplicationUser();\n            user.UserName = parameters.UserName;\n            var result = await _userManager.CreateAsync(user, parameters.Password);\n            if (!result.Succeeded) return BadRequest(result.Errors.FirstOrDefault()?.Description);\n\n            return await Login(new LoginRequest\n            {\n                UserName = parameters.UserName,\n                Password = parameters.Password\n            });\n        }\n        [HttpPost]\n        public async Task&lt;IActionResult&gt; Logout()\n        {\n            await _signInManager.SignOutAsync();\n            return Ok();\n        }\n        [HttpGet]\n        public CurrentUser CurrentUserInfo()\n        {\n            return new CurrentUser\n            {\n                IsAuthenticated = User.Identity.IsAuthenticated,\n                UserName = User.Identity.Name,\n                Claims = User.Claims\n                .ToDictionary(c =&gt; c.Type, c =&gt; c.Value)\n            };\n        }\n    }\n</code></pre>\n<p>How can I add roles to user claims?</p>\n<hr />\n<p>Server-&gt; Startup.cs:</p>\n<pre><code>  public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddDbContext&lt;CugemderMobileAppDbContext&gt;();\n            services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));\n\n            services.AddDefaultIdentity&lt;ApplicationUser&gt;(options =&gt; options.SignIn.RequireConfirmedAccount = true)\n               .AddRoles&lt;IdentityRole&gt;()\n               .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;();\n\n            services.ConfigureApplicationCookie(options =&gt;\n            {\n                options.Cookie.HttpOnly = false;\n                options.Events.OnRedirectToLogin = context =&gt;\n                {\n                    context.Response.StatusCode = 401;\n                    return Task.CompletedTask;\n                };\n            });\n            services.AddControllers().AddNewtonsoftJson(options =&gt;\n                      options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore\n                   );\n            services.AddControllersWithViews();\n            services.AddRazorPages();\n            services.AddCors(options =&gt; options.AddDefaultPolicy(builder =&gt; builder.AllowAnyOrigin()));\n        }\n\n\n\n   public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseHttpsRedirection();\n\n            app.UseRouting();\n\n\n            app.UseCors();\n\n            app.UseAuthorization();\n            app.UseAuthentication();\n\n            app.UseEndpoints(endpoints =&gt;\n            {\n                endpoints.MapRazorPages();\n                endpoints.MapControllers();\n                endpoints.MapFallbackToFile(&quot;index.html&quot;);\n            });\n        }\n</code></pre>\n"
}