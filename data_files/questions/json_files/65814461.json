{
    "tags": [
        "c#",
        "authentication",
        "blazor",
        "webassembly",
        "custom-authentication"
    ],
    "owner": {
        "reputation": 9,
        "user_id": 15013711,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/c9eed9afd338666af67d74b9b0b36992?s=128&d=identicon&r=PG&f=1",
        "display_name": "Saga",
        "link": "https://stackoverflow.com/users/15013711/saga"
    },
    "is_answered": false,
    "view_count": 141,
    "answer_count": 0,
    "score": 0,
    "last_activity_date": 1611565485,
    "creation_date": 1611163311,
    "last_edit_date": 1611565485,
    "question_id": 65814461,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65814461/blazor-specified-cast-is-not-valid-on-ihttpclientfactory-createclient",
    "title": "Blazor - &#39;Specified cast is not valid&#39; on IHttpClientFactory.CreateClient",
    "body": "<p>right now I am trying to implement an absolutly basic (fake) authentication in Blazor WASM. I created a Visual Studio &quot;Blazor Webassembly App&quot; Project with .Net 5.0 and Authentication.\nI stripped of .razor files except Index.razor which got the following implementation</p>\n<pre><code>@page &quot;/&quot;\n@inherits DataLayerGeneratorClient.Pages.Main.IndexBase\n\n@using Microsoft.AspNetCore.Components.Authorization\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n\n&lt;AuthorizeView&gt;\n    &lt;Authorized&gt;\n        Hello, @context.User.Identity.Name!\n        &lt;button class=&quot;nav-link btn btn-link&quot; @onclick=&quot;Logout&quot;&gt;\n            Log out\n        &lt;/button&gt;\n    &lt;/Authorized&gt;\n    &lt;NotAuthorized&gt;\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;User&lt;/td&gt;\n                &lt;td&gt;&lt;input type=&quot;text&quot; @bind=&quot;AuthenticationStateProvider.User&quot; /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Password&lt;/td&gt;\n                &lt;td&gt;&lt;input type=&quot;text&quot; @bind=&quot;AuthenticationStateProvider.Password&quot; /&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n        &lt;br /&gt;\n        &lt;button @onclick=&quot;Login&quot;&gt;Login&lt;/button&gt;\n    &lt;/NotAuthorized&gt;\n&lt;/AuthorizeView&gt;\n</code></pre>\n<p>and IndexBase.cs</p>\n<pre><code>public class IndexBase : LayoutComponentBase\n{\n    [Inject]\n    public IHttpClientFactory HttpClientFactory { get; set; }\n\n    [Inject]\n    public CustomAuthenticationStateProvider AuthenticationStateProvider { get; set; }\n\n\n    public async Task Login(MouseEventArgs e)\n    {\n        using (HttpClient client = HttpClientFactory.CreateClient(&quot;ServerAPI&quot;))\n        {\n            ...\n        }\n    }\n}\n</code></pre>\n<p>I also made a CustomAuthenticationStateProvider</p>\n<pre><code>public class CustomAuthenticationStateProvider : AuthenticationStateProvider\n{\n    public override Task&lt;AuthenticationState&gt; GetAuthenticationStateAsync()\n        {\n            //Login failed\n            return Task.FromResult(new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity())));\n\n            //Login succeeded\n            //Claim claim = new Claim(ClaimTypes.Name, &quot;TestUser&quot;);\n            //ClaimsIdentity claimsIdentity = new ClaimsIdentity(new[] { claim }, &quot;fake auth&quot;);\n            //ClaimsPrincipal claimsPrincipal = new ClaimsPrincipal(claimsIdentity);\n            //AuthenticationState authenticationState = new AuthenticationState(claimsPrincipal);\n            //return Task.FromResult(authenticationState);\n        }\n}\n</code></pre>\n<p>And a CustomAuthorizationMessageHandler</p>\n<pre><code>public class CustomAuthorizationMessageHandler : AuthorizationMessageHandler\n{\n    private readonly CustomAuthenticationStateProvider _customAuthenticationStateProvider;\n\n    public CustomAuthorizationMessageHandler(IAccessTokenProvider provider, NavigationManager navigation, CustomAuthenticationStateProvider customAuthenticationStateProvider) : base(provider, navigation)\n    {\n        if (customAuthenticationStateProvider == null)\n        {\n            throw new ArgumentNullException(nameof(customAuthenticationStateProvider));\n        }\n        _customAuthenticationStateProvider = customAuthenticationStateProvider;\n    }\n\n    ...\n}\n</code></pre>\n<p>In App.razor I changed the DefaultLayout</p>\n<pre><code>DefaultLayout=&quot;@typeof(Index)&quot;\n</code></pre>\n<p>and at last here is the Main from Program.cs</p>\n<pre><code>public static async Task Main(string[] args)\n{\n    var builder = WebAssemblyHostBuilder.CreateDefault(args);\n    builder.RootComponents.Add&lt;App&gt;(&quot;#app&quot;);            \n\n    builder.Services.AddApiAuthorization();\n    builder.Services.AddAuthorizationCore();\n\n    builder.Services.AddScoped&lt;CustomAuthenticationStateProvider&gt;();\n    builder.Services.AddScoped&lt;AuthenticationStateProvider, CustomAuthenticationStateProvider&gt;();\n    builder.Services.AddScoped&lt;CustomAuthorizationMessageHandler&gt;();\n    builder.Services.AddScoped&lt;AuthorizationMessageHandler, CustomAuthorizationMessageHandler&gt;();\n\n    builder.Services.AddHttpClient(&quot;ServerAPI&quot;).AddHttpMessageHandler(sp =&gt;\n    {\n        return sp.GetService&lt;CustomAuthorizationMessageHandler&gt;().ConfigureHandler(authorizedUrls: new[] { &quot;http://localhost:10000&quot; });\n    });\n\n    builder.Services.AddScoped(serviceProvider =&gt; serviceProvider.GetRequiredService&lt;IHttpClientFactory&gt;().CreateClient(&quot;ServerAPI&quot;));\n\n    await builder.Build().RunAsync();\n}\n</code></pre>\n<p>Now the Problem. As soon as IHttpClientFactory.CreateHttpClient gets executed it fails with the error &quot;Specified cast is not valid&quot;.\nWhat cast is not valid?</p>\n<p><strong>EDIT 1</strong>\nInjecting HttpClient instead of IHttpClientFactory seems not to be the answer. When I tested it the error just came on start up instead of button click. Here it is again, with stack trace, if that helps</p>\n<pre><code>System.InvalidCastException: Specified cast is not valid.\n   at Microsoft.Extensions.DependencyInjection.WebAssemblyAuthenticationServiceCollectionExtensions.&lt;&gt;c__0`3[[Microsoft.AspNetCore.Components.WebAssembly.Authentication.RemoteAuthenticationState, Microsoft.AspNetCore.Components.WebAssembly.Authentication, Version=5.0.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[Microsoft.AspNetCore.Components.WebAssembly.Authentication.RemoteUserAccount, Microsoft.AspNetCore.Components.WebAssembly.Authentication, Version=5.0.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[Microsoft.AspNetCore.Components.WebAssembly.Authentication.ApiAuthorizationProviderOptions, Microsoft.AspNetCore.Components.WebAssembly.Authentication, Version=5.0.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].&lt;AddRemoteAuthentication&gt;b__0_1(IServiceProvider sp)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, RuntimeResolverContext context)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[[Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext, Microsoft.Extensions.DependencyInjection, Version=5.0.0.1, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Object, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitCallSiteMain(ServiceCallSite callSite, RuntimeResolverContext argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[[Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext, Microsoft.Extensions.DependencyInjection, Version=5.0.0.1, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Object, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitCallSite(ServiceCallSite callSite, RuntimeResolverContext argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[[Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext, Microsoft.Extensions.DependencyInjection, Version=5.0.0.1, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Object, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitCallSiteMain(ServiceCallSite callSite, RuntimeResolverContext argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[[Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext, Microsoft.Extensions.DependencyInjection, Version=5.0.0.1, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Object, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitCallSite(ServiceCallSite callSite, RuntimeResolverContext argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeServiceProviderEngine.&lt;&gt;c__DisplayClass1_0.&lt;RealizeService&gt;b__1(ServiceProviderEngineScope p)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeServiceProviderEngine.&lt;&gt;c__DisplayClass1_0.&lt;RealizeService&gt;b__0(ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.GetService(Type serviceType)\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[CustomAuthorizationMessageHandler](IServiceProvider provider)\n   at DataLayerGeneratorClient.Program.&lt;&gt;c.&lt;Main&gt;b__0_0(IServiceProvider sp) in D:\\Dev\\4.0\\Test2\\DataLayerGenerat\u2026tem.Lazy`1[[Microsoft.Extensions.Http.ActiveHandlerTrackingEntry, Microsoft.Extensions.Http, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\n   at System.Lazy`1[[Microsoft.Extensions.Http.ActiveHandlerTrackingEntry, Microsoft.Extensions.Http, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].CreateValue()\n   at System.Lazy`1[[Microsoft.Extensions.Http.ActiveHandlerTrackingEntry, Microsoft.Extensions.Http, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].get_Value()\n   at Microsoft.Extensions.Http.DefaultHttpClientFactory.CreateHandler(String name)\n   at Microsoft.Extensions.Http.DefaultHttpClientFactory.CreateClient(String name)\n   at DataLayerGeneratorClient.Program.&lt;&gt;c.&lt;Main&gt;b__0_1(IServiceProvider serviceProvider) in D:\\Dev\\4.0\\Test2\\DataLayerGeneratorClient\\Program.cs:line 32\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, RuntimeResolverContext context)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[[Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext, Microsoft.Extensions.DependencyInjection, Version=5.0.0.1, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Object, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitCallSiteMain(ServiceCallSite callSite, RuntimeResolverContext argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[[Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext, Microsoft.Extensions.DependencyInjection, Version=5.0.0.1, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Object, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitCallSite(ServiceCallSite callSite, RuntimeResolverContext argument)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeServiceProviderEngine.&lt;&gt;c__DisplayClass1_0.&lt;RealizeService&gt;b__1(ServiceProviderEngineScope p)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeServiceProviderEngine.&lt;&gt;c__DisplayClass1_0.&lt;RealizeService&gt;b__0(ServiceProviderEngineScope scope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.GetService(Type serviceType)\n   at Microsoft.AspNetCore.Components.ComponentFactory.&lt;&gt;c__DisplayClass6_0.&lt;CreateInitializer&gt;g__Initialize|2(IServiceProvider serviceProvider, IComponent component)\n   at Microsoft.AspNetCore.Components.ComponentFactory.PerformPropertyInjection(IServiceProvider serviceProvider, IComponent instance)\n   at Microsoft.AspNetCore.Components.ComponentFactory.InstantiateComponent(IServiceProvider serviceProvider, Type componentType)\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.InstantiateComponent(Type componentType)\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.InstantiateChildComponentOnFrame(RenderTreeFrame&amp; frame, Int32 parentComponentId)\n   at Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame(DiffContext&amp; diffContext, Int32 frameIndex)\n   at Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree(DiffContext&amp; diffContext, Int32 frameIndex)\n   at Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.InsertNewFrame(DiffContext&amp; diffContext, Int32 newFrameIndex)\n   at Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange(DiffContext&amp; diffContext, Int32 oldStartIndex, Int32 oldEndIndexExcl, Int32 newStartIndex, Int32 newEndIndexExcl)\n   at Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.ComputeDiff(Renderer renderer, RenderBatchBuilder batchBuilder, Int32 componentId, ArrayRange`1 oldTree, ArrayRange`1 newTree)\n   at Microsoft.AspNetCore.Components.Rendering.ComponentState.RenderIntoBatch(RenderBatchBuilder batchBuilder, RenderFragment renderFragment)\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderInExistingBatch(RenderQueueEntry renderQueueEntry)\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessRenderQueue()\u2026\n</code></pre>\n<p><strong>Edit 2</strong>\nAs soon as I remove any reference to CustomAuthenticationStateProvider the error is gone. But where does that make sense?</p>\n<p><strong>Edit 3</strong>\nI got it working by removing AddApiAuthorization and implement a custom HttpMessageHandler instead of an cucstom AuthorizationMessageHandler</p>\n"
}