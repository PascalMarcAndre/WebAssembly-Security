{
    "tags": [
        "asp.net",
        "blazor",
        "identityserver4",
        "grpc"
    ],
    "owner": {
        "reputation": 289,
        "user_id": 14201840,
        "user_type": "registered",
        "profile_image": "https://www.gravatar.com/avatar/4e05d4fd94801927852066255854d2c6?s=128&d=identicon&r=PG&f=1",
        "display_name": "TheNoobProgrammer",
        "link": "https://stackoverflow.com/users/14201840/thenoobprogrammer"
    },
    "is_answered": true,
    "view_count": 30,
    "accepted_answer_id": 66543229,
    "answer_count": 2,
    "score": 0,
    "last_activity_date": 1615278283,
    "creation_date": 1615225966,
    "last_edit_date": 1615277826,
    "question_id": 66534753,
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/66534753/grpc-identityserver4-error-cant-sign-in-with-google-auth",
    "title": "gRPC IdentityServer4 Error: Can&#39;t sign in with google auth",
    "body": "<p>I'm using Blazor WebAssembly with gRPC and i'm new to Identity Server 4 and trying to implement google sign-in. I already followed the tutorial in the docs but when i tried to load the website, the console gave 2 errors like below. I searched many StackOverflow posts and GitHub issues similiar to this error and it didn't really helped me. My guess is that the error is in the server side because it happens when the website is loading.</p>\n<blockquote>\n<p>Access to XMLHttpRequest at\n'https://localhost:5000/signin-google/.well-known/openid-configuration'\nfrom origin 'https://localhost:5001' has been blocked by CORS policy:\nNo 'Access-Control-Allow-Origin' header is present on the requested\nresource.</p>\n</blockquote>\n<blockquote>\n<p>AuthenticationService.js:1 GET\nhttps://localhost:5000/signin-google/.well-known/openid-configuration\nnet::ERR_FAILED</p>\n</blockquote>\n<p>The error shows that it has been blocked by CORS policy even though i already allowed all website url to access it(for testing purposes) and when i'm trying to sign-in with google, i got redirected to a failed login url that says network error. Here's the code.<br />\n<strong>BackEnd/Startup.cs</strong></p>\n<pre><code>namespace BackEnd\n    {\n        public class Startup\n        {\n            // This method gets called by the runtime. Use this method to add services to the container.\n            // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\n            public void ConfigureServices(IServiceCollection services)\n            {\n                services.AddGrpc();\n    \n            \n    \n                services.AddDbContext&lt;UserDbContext&gt;(options =&gt; options.UseInMemoryDatabase(&quot;UserDatabase&quot;));\n    \n                services.AddCors(o =&gt; o.AddPolicy(&quot;AllowAll&quot;, builder =&gt;\n                {\n                    builder.AllowAnyOrigin()\n                        .AllowAnyMethod()\n                        .AllowAnyHeader()\n                        .WithExposedHeaders(&quot;Grpc-Status&quot;, &quot;Grpc-Message&quot;, &quot;Grpc-Encoding&quot;, &quot;Grpc-Accept-Encoding&quot;);\n                }));\n    \n                services.AddDefaultIdentity&lt;ApplicationUser&gt;(options =&gt; options.SignIn.RequireConfirmedAccount = true)\n                    .AddRoles&lt;IdentityRole&gt;()\n                    .AddEntityFrameworkStores&lt;UserDbContext&gt;();\n    \n                services.AddIdentityServer()\n                    .AddInMemoryIdentityResources(ServerConfiguration.IdentityResources)\n                    .AddInMemoryApiResources(ServerConfiguration.ApiResources)\n                    .AddInMemoryApiScopes(ServerConfiguration.ApiScopes)\n                    .AddInMemoryClients(ServerConfiguration.Clients)\n                    // .AddApiAuthorization&lt;ApplicationUser, UserDbContext&gt;()\n                    .AddTestUsers(ServerConfiguration.TestUsers);\n    \n                JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear();\n    \n                services.AddTransient&lt;IProfileService, ProfileService&gt;();\n    \n                services.AddAuthentication(options =&gt; {\n                    options.DefaultScheme = &quot;Cookies&quot;;\n                    options.DefaultChallengeScheme = &quot;oidc&quot;;\n                })\n                    .AddGoogle(&quot;Google&quot;, options =&gt;\n                    {\n                        options.SignInScheme = IdentityServerConstants.ExternalCookieAuthenticationScheme;\n    \n                        options.ClientId = &lt;confidential&gt;;\n                        options.ClientSecret = &lt;confidential&gt;;\n                    })\n                    .AddCookie(&quot;Cookies&quot;)\n                    .AddOpenIdConnect(&quot;oidc&quot;, options =&gt;\n                    {\n                        options.Authority = &quot;https://localhost:5000&quot;;\n    \n                        options.ClientId = &quot;499675830263-ldcg4fm7kcbjlt48tpaffqdbfnskmi8v.apps.googleusercontent.com&quot;;\n                        options.ResponseType = &quot;code&quot;;\n    \n                        options.SaveTokens = true;\n    \n                        options.Scope.Add(&quot;protectedScope&quot;);\n                        options.Scope.Add(&quot;offline_access&quot;);\n                        options.Scope.Add(&quot;role&quot;);\n                        options.ClaimActions.MapJsonKey(&quot;role&quot;, &quot;role&quot;, &quot;role&quot;);\n                        options.TokenValidationParameters.RoleClaimType = &quot;role&quot;;\n                    });\n    \n                services.AddAuthorization();\n            }\n    \n            // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n            public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n            {\n                if (env.IsDevelopment())\n                {\n                    app.UseDeveloperExceptionPage();\n                }\n    \n                app.UseRouting();\n    \n                app.UseCors();\n    \n                app.UseGrpcWeb(new GrpcWebOptions { DefaultEnabled = true });\n    \n                app.UseIdentityServer();\n    \n                app.UseAuthentication();\n    \n                app.UseAuthorization();\n    \n                app.UseEndpoints(endpoints =&gt;\n                {\n                    endpoints.MapGrpcService&lt;GreeterService&gt;().RequireCors(&quot;AllowAll&quot;);\n    \n                    endpoints.MapGrpcService&lt;UserService&gt;().RequireCors(&quot;AllowAll&quot;);\n    \n                    endpoints.MapGet(&quot;/&quot;, async context =&gt;\n                    {\n                        await context.Response.WriteAsync(&quot;Communication with gRPC endpoints must be made through a gRPC client. To learn how to create a client, visit: https://go.microsoft.com/fwlink/?linkid=2086909&quot;);\n                    });\n                });\n            }\n        }\n    }\n</code></pre>\n<p><strong>BackEnd/ServerConfiguration.cs</strong></p>\n<pre><code>namespace BackEnd\n{\n    public static class ServerConfiguration\n    {\n        public static List&lt;IdentityResource&gt; IdentityResources { \n            get \n            {\n                List&lt;IdentityResource&gt; idResources = new List&lt;IdentityResource&gt;()\n                {\n                    new IdentityResources.OpenId(),\n                    new IdentityResources.Profile(),\n                    new IdentityResources.Email(),\n                    new IdentityResource(&quot;roles&quot;, &quot;User roles&quot;, new List&lt;string&gt; { &quot;role&quot; })\n                };\n                return idResources;\n            }\n        }\n        public static List&lt;ApiScope&gt; ApiScopes {\n            get\n            {\n                List&lt;ApiScope&gt; apiScopes = new List&lt;ApiScope&gt;();\n                apiScopes.Add(new ApiScope(&quot;protectedScope&quot;, &quot;Protected Scope&quot;));\n                return apiScopes;\n            }\n        }\n        public static List&lt;ApiResource&gt; ApiResources { \n            get\n            {\n                ApiResource userApiResource = new ApiResource(&quot;toDoWebApiResource&quot;, &quot;Todo Web Api&quot;)\n                {\n                    Scopes = { &quot;protectedScope&quot; },\n                    UserClaims = \n                    {\n                        &quot;openid&quot;,\n                        &quot;email&quot;,\n                        &quot;profile&quot;,\n                        &quot;role&quot;\n                    }\n                };\n                List&lt;ApiResource&gt; apiResources = new List&lt;ApiResource&gt;();\n                apiResources.Add(userApiResource);\n\n                return apiResources;\n            }\n        }\n        public static List&lt;Client&gt; Clients { \n            get\n            {\n                Client client = new Client()\n                {\n                    ClientId = &quot;499675830263-ldcg4fm7kcbjlt48tpaffqdbfnskmi8v.apps.googleusercontent.com&quot;,\n                    ClientName = &quot;client 1&quot;,\n                    RequireClientSecret = false,\n                    RequirePkce = true,\n                    AllowedCorsOrigins = { &quot;https://localhost:5001&quot; },\n                    AllowedGrantTypes = GrantTypes.Code,\n                    RedirectUris = { &quot;https://localhost:5001/authentication/login-callback&quot; },\n                    PostLogoutRedirectUris = { &quot;https://localhost:5001/authentication/logout-callback&quot; },\n                    AllowOfflineAccess = true,\n                    AllowedScopes = new List&lt;string&gt;{\n                        IdentityServerConstants.StandardScopes.OpenId,\n                        IdentityServerConstants.StandardScopes.Profile,\n                        IdentityServerConstants.StandardScopes.Email,\n                        &quot;protectedScope&quot;\n                    }\n                };\n                List&lt;Client&gt; clients = new List&lt;Client&gt;();\n                clients.Add(client);\n\n                return clients;\n            }\n        }\n        public static List&lt;TestUser&gt; TestUsers { \n            get\n            {\n                TestUser user1 = new TestUser()\n                {\n                    SubjectId = &quot;2f47f8f0-bea1-4f0e-ade1-88533a0eaf57&quot;,\n                    Username = &quot;John&quot;,\n                    Claims = new List&lt;Claim&gt;()\n                    {\n                        new Claim(&quot;role&quot;, &quot;SignedInUser&quot;),\n                        new Claim(&quot;email&quot;, &quot;johnsmith@gmail.com&quot;),\n                        new Claim(&quot;picture&quot;, &quot;https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fwww.business2community.com%2Fsocial-media%2Fimportance-profile-picture-career-01899604&amp;psig=AOvVaw2LC5T-WZMYnHD9I7PeK7lT&amp;ust=1615219065948000&amp;source=images&amp;cd=vfe&amp;ved=2ahUKEwip1caGxp7vAhV1NbcAHd_2BFwQjRx6BAgAEAc&quot;)\n                    }\n                };\n                List&lt;TestUser&gt; testUsers = new List&lt;TestUser&gt;();\n                testUsers.Add(user1);\n\n                return testUsers;\n            }\n        }\n    }\n}\n</code></pre>\n<p><strong>FrontEnd/wwwroot/appsettings.json</strong></p>\n<pre><code>{\n    &quot;Authentication&quot;:{\n        &quot;Google&quot;: {\n            &quot;Authority&quot;: &quot;https://localhost:5000&quot;,\n            &quot;ClientId&quot;: &lt;confidential&gt;,\n            &quot;ClientSecret&quot;: &lt;confidential&gt;,\n            &quot;DefaultScopes&quot;: [\n                &quot;email&quot;,\n                &quot;profile&quot;,\n                &quot;openid&quot;\n            ],\n            &quot;PostLogoutRedirectUri&quot;: &quot;https://localhost:5001/authentication/logout-callback&quot;,\n            &quot;RedirectUri&quot;: &quot;https://localhost:5001/authentication/login-callback&quot;,\n            &quot;ResponseType&quot;: &quot;code&quot;\n        }\n    }\n}\n</code></pre>\n"
}